{
	"$schema": "http://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#",
	"contentVersion": "1.0.0.0",
	"parameters": {
		"workspaceName": {
			"type": "string",
			"metadata": "Workspace name",
			"defaultValue": "ws-syn-aletu"
		},
		"Serverless_connectionString": {
			"type": "secureString",
			"metadata": "Secure string for 'connectionString' of 'Serverless'",
			"defaultValue": "Integrated Security=False;Encrypt=True;Connection Timeout=30;Data Source=ws-syn-aletu-ondemand.sql.azuresynapse.net;Initial Catalog=LogicalDWH"
		},
		"ws-syn-aletu-WorkspaceDefaultSqlServer_connectionString": {
			"type": "secureString",
			"metadata": "Secure string for 'connectionString' of 'ws-syn-aletu-WorkspaceDefaultSqlServer'",
			"defaultValue": "Integrated Security=False;Encrypt=True;Connection Timeout=30;Data Source=tcp:ws-syn-aletu.sql.azuresynapse.net,1433;Initial Catalog=@{linkedService().DBName}"
		},
		"HttpServerISS_properties_typeProperties_url": {
			"type": "string",
			"defaultValue": "http://api.open-notify.org/iss-now.json"
		},
		"nyc_tlc_yellow_sasUri": {
			"type": "secureString",
			"metadata": "Secure string for 'sasUri' of 'nyc_tlc_yellow'"
		},
		"ws-syn-aletu-WorkspaceDefaultStorage_properties_typeProperties_url": {
			"type": "string",
			"defaultValue": "https://datalakeytaletu.dfs.core.windows.net"
		}
	},
	"variables": {
		"workspaceId": "[concat('Microsoft.Synapse/workspaces/', parameters('workspaceName'))]"
	},
	"resources": [
		{
			"name": "[concat(parameters('workspaceName'), '/load-iss-json')]",
			"type": "Microsoft.Synapse/workspaces/pipelines",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"activities": [
					{
						"name": "Get data",
						"type": "Copy",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "JsonSource",
								"storeSettings": {
									"type": "HttpReadSettings",
									"requestMethod": "GET"
								},
								"formatSettings": {
									"type": "JsonReadSettings"
								}
							},
							"sink": {
								"type": "JsonSink",
								"storeSettings": {
									"type": "AzureBlobFSWriteSettings"
								},
								"formatSettings": {
									"type": "JsonWriteSettings"
								}
							},
							"enableStaging": false
						},
						"inputs": [
							{
								"referenceName": "iss_position",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "iss_position_output",
								"type": "DatasetReference",
								"parameters": {
									"fileName": {
										"value": "@{utcnow()}",
										"type": "Expression"
									}
								}
							}
						]
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"folder": {
					"name": "serverless"
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/datasets/iss_position')]",
				"[concat(variables('workspaceId'), '/datasets/iss_position_output')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/load-iss-parquet')]",
			"type": "Microsoft.Synapse/workspaces/pipelines",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"activities": [
					{
						"name": "Get data",
						"type": "Copy",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "JsonSource",
								"storeSettings": {
									"type": "HttpReadSettings",
									"requestMethod": "GET"
								},
								"formatSettings": {
									"type": "JsonReadSettings"
								}
							},
							"sink": {
								"type": "ParquetSink",
								"storeSettings": {
									"type": "AzureBlobFSWriteSettings"
								},
								"formatSettings": {
									"type": "ParquetWriteSettings"
								}
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"mappings": [
									{
										"source": {
											"path": "$['timestamp']"
										},
										"sink": {
											"name": "timestamp",
											"type": "Int64"
										}
									},
									{
										"source": {
											"path": "$['message']"
										},
										"sink": {
											"name": "message",
											"type": "String"
										}
									},
									{
										"source": {
											"path": "$['iss_position']['latitude']"
										},
										"sink": {
											"name": "latitude",
											"type": "String"
										}
									},
									{
										"source": {
											"path": "$['iss_position']['longitude']"
										},
										"sink": {
											"name": "longitude",
											"type": "String"
										}
									}
								]
							}
						},
						"inputs": [
							{
								"referenceName": "iss_position",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "iss_position_ouput",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"folder": {
					"name": "serverless"
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/datasets/iss_position')]",
				"[concat(variables('workspaceId'), '/datasets/iss_position_ouput')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/update-external-table')]",
			"type": "Microsoft.Synapse/workspaces/pipelines",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"activities": [
					{
						"name": "renew_cetas",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [
							{
								"activity": "delete-extTable-location",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "ldw.ctas_renew"
						},
						"linkedServiceName": {
							"referenceName": "Serverless",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "delete-extTable-location",
						"type": "Delete",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataset": {
								"referenceName": "BinaryCetas",
								"type": "DatasetReference",
								"parameters": {}
							},
							"logStorageSettings": {
								"linkedServiceName": {
									"referenceName": "ws-syn-aletu-WorkspaceDefaultStorage",
									"type": "LinkedServiceReference"
								},
								"path": "sanfranciscofireworkersdata/sanfrancisco/raw/log_delete"
							},
							"enableLogging": true,
							"storeSettings": {
								"type": "AzureBlobFSReadSettings",
								"recursive": true,
								"enablePartitionDiscovery": false
							}
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"folder": {
					"name": "serverless"
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/linkedServices/Serverless')]",
				"[concat(variables('workspaceId'), '/datasets/BinaryCetas')]",
				"[concat(variables('workspaceId'), '/linkedServices/ws-syn-aletu-WorkspaceDefaultStorage')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/BinaryCetas')]",
			"type": "Microsoft.Synapse/workspaces/datasets",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"linkedServiceName": {
					"referenceName": "ws-syn-aletu-WorkspaceDefaultStorage",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "Binary",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"folderPath": "sanfrancisco/raw",
						"fileSystem": "sanfranciscofireworkersdata"
					}
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/linkedServices/ws-syn-aletu-WorkspaceDefaultStorage')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/iss_position')]",
			"type": "Microsoft.Synapse/workspaces/datasets",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"linkedServiceName": {
					"referenceName": "HttpServerISS",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "Json",
				"typeProperties": {
					"location": {
						"type": "HttpServerLocation"
					}
				},
				"schema": {}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/linkedServices/HttpServerISS')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/iss_position_ouput')]",
			"type": "Microsoft.Synapse/workspaces/datasets",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"linkedServiceName": {
					"referenceName": "ws-syn-aletu-WorkspaceDefaultStorage",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "Parquet",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"folderPath": "raw/serverless/parquet",
						"fileSystem": "iss-position"
					},
					"compressionCodec": "snappy"
				},
				"schema": []
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/linkedServices/ws-syn-aletu-WorkspaceDefaultStorage')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/iss_position_output')]",
			"type": "Microsoft.Synapse/workspaces/datasets",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"linkedServiceName": {
					"referenceName": "ws-syn-aletu-WorkspaceDefaultStorage",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"fileName": {
						"type": "string"
					}
				},
				"annotations": [],
				"type": "Json",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"fileName": {
							"value": "@{dataset().fileName}.json",
							"type": "Expression"
						},
						"folderPath": "raw/serverless/json",
						"fileSystem": "iss-position"
					}
				},
				"schema": {}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/linkedServices/ws-syn-aletu-WorkspaceDefaultStorage')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/HttpServerISS')]",
			"type": "Microsoft.Synapse/workspaces/linkedServices",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"annotations": [],
				"type": "HttpServer",
				"typeProperties": {
					"url": "[parameters('HttpServerISS_properties_typeProperties_url')]",
					"enableServerCertificateValidation": true,
					"authenticationType": "Anonymous"
				},
				"connectVia": {
					"referenceName": "AutoResolveIntegrationRuntime",
					"type": "IntegrationRuntimeReference"
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/integrationRuntimes/AutoResolveIntegrationRuntime')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/Serverless')]",
			"type": "Microsoft.Synapse/workspaces/linkedServices",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"annotations": [],
				"type": "AzureSqlDW",
				"typeProperties": {
					"connectionString": "[parameters('Serverless_connectionString')]"
				},
				"connectVia": {
					"referenceName": "AutoResolveIntegrationRuntime",
					"type": "IntegrationRuntimeReference"
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/integrationRuntimes/AutoResolveIntegrationRuntime')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/nyc_tlc_yellow')]",
			"type": "Microsoft.Synapse/workspaces/linkedServices",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"annotations": [],
				"type": "AzureBlobStorage",
				"typeProperties": {
					"sasUri": "[parameters('nyc_tlc_yellow_sasUri')]"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/ws-syn-aletu-WorkspaceDefaultSqlServer')]",
			"type": "Microsoft.Synapse/workspaces/linkedServices",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"parameters": {
					"DBName": {
						"type": "String"
					}
				},
				"annotations": [],
				"type": "AzureSqlDW",
				"typeProperties": {
					"connectionString": "[parameters('ws-syn-aletu-WorkspaceDefaultSqlServer_connectionString')]"
				},
				"connectVia": {
					"referenceName": "AutoResolveIntegrationRuntime",
					"type": "IntegrationRuntimeReference"
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/integrationRuntimes/AutoResolveIntegrationRuntime')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/ws-syn-aletu-WorkspaceDefaultStorage')]",
			"type": "Microsoft.Synapse/workspaces/linkedServices",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"annotations": [],
				"type": "AzureBlobFS",
				"typeProperties": {
					"url": "[parameters('ws-syn-aletu-WorkspaceDefaultStorage_properties_typeProperties_url')]"
				},
				"connectVia": {
					"referenceName": "AutoResolveIntegrationRuntime",
					"type": "IntegrationRuntimeReference"
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/integrationRuntimes/AutoResolveIntegrationRuntime')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/ws_test')]",
			"type": "Microsoft.Synapse/workspaces/linkedServices",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"annotations": [],
				"type": "PowerBIWorkspace",
				"typeProperties": {
					"workspaceID": "e5e1494f-03c2-4cef-a2cf-e73b2e2ff828",
					"tenantID": "116b1d74-6381-43f7-9900-26a226ae49d0"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/tr_iss_scheduled')]",
			"type": "Microsoft.Synapse/workspaces/triggers",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"annotations": [],
				"runtimeState": "Stopped",
				"pipelines": [
					{
						"pipelineReference": {
							"referenceName": "load-iss-parquet",
							"type": "PipelineReference"
						},
						"parameters": {}
					},
					{
						"pipelineReference": {
							"referenceName": "load-iss-json",
							"type": "PipelineReference"
						},
						"parameters": {}
					}
				],
				"type": "ScheduleTrigger",
				"typeProperties": {
					"recurrence": {
						"frequency": "Minute",
						"interval": 1,
						"startTime": "2023-04-27T15:45:00",
						"endTime": "2023-04-28T21:00:00",
						"timeZone": "W. Europe Standard Time"
					}
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/pipelines/load-iss-parquet')]",
				"[concat(variables('workspaceId'), '/pipelines/load-iss-json')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/AutoResolveIntegrationRuntime')]",
			"type": "Microsoft.Synapse/workspaces/integrationRuntimes",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"type": "Managed",
				"typeProperties": {
					"computeProperties": {
						"location": "AutoResolve",
						"dataFlowProperties": {
							"computeType": "General",
							"coreCount": 8,
							"timeToLive": 0
						}
					}
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/WorkspaceSystemIdentity')]",
			"type": "Microsoft.Synapse/workspaces/credentials",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"type": "ManagedIdentity",
				"typeProperties": {}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/cetas-iss')]",
			"type": "Microsoft.Synapse/workspaces/sqlscripts",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"folder": {
					"name": "iss-position"
				},
				"content": {
					"query": "USE LogicalDWH;\nGO\n\nCREATE SCHEMA iss;\n\nCREATE EXTERNAL DATA SOURCE [iss] WITH (LOCATION = 'abfss://iss-position@datalakeytaletu.dfs.core.windows.net/', CREDENTIAL = [SynapseIdentity]);\nGO\n\nCREATE EXTERNAL TABLE iss.cetas_position\n\tWITH (\n\tLOCATION = 'cetas-output/parquet/',\n\tDATA_SOURCE = [iss],\n\tFILE_FORMAT = [parquet]\n\t) AS\nSELECT\n    b.[timestamp]\n    ,b.[message] \n    ,c.*\nFROM (\n    SELECT \n        jsonContent\n    FROM\n        OPENROWSET(\n            BULK 'https://datalakeytaletu.dfs.core.windows.net/iss-position/raw/serverless/json/**',\n            FORMAT = 'CSV',\n            FIELDQUOTE = '0x0b',\n            FIELDTERMINATOR ='0x0b',\n            ROWTERMINATOR = '0x0b'\n        )\n        WITH (\n            jsonContent varchar(MAX)\n        ) AS [result]\n    ) AS a\n    CROSS APPLY\n    OPENJSON(a.jsonContent) WITH (\n        [timestamp]     BIGINT\n        ,[message]      VARCHAR(20)\n        ,[iss_position] nvarchar(max) AS JSON\n    ) AS b\n    CROSS APPLY\n    OPENJSON(b.[iss_position]) WITH (\n        latitude    VARCHAR(20)\n        ,longitude  VARCHAR(20)\n    ) AS c;",
					"metadata": {
						"language": "sql"
					},
					"currentConnection": {
						"databaseName": "LogicalDWH",
						"poolName": "Built-in"
					},
					"resultLimit": 5000
				},
				"type": "SqlQuery"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/cetas-taxi')]",
			"type": "Microsoft.Synapse/workspaces/sqlscripts",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"folder": {
					"name": "taxi/serverless/cetas"
				},
				"content": {
					"query": "USE LogicalDWH;\nGO\n\nCREATE SCHEMA taxi;\n\nCREATE EXTERNAL DATA SOURCE [nyctaxi] WITH (LOCATION = 'abfss://yellowtaxi@datalakeytaletu.dfs.core.windows.net/nyc/raw/', CREDENTIAL = [SynapseIdentity]);\nGO\n\nCREATE EXTERNAL TABLE taxi.rate_2010_agg\n\tWITH (\n\tLOCATION = '2010/',\n\tDATA_SOURCE = [nyctaxi],\n\tFILE_FORMAT = [parquet]\n\t) AS\nSELECT\n    rateCodeId\n    ,SUM(CAST(passengerCount AS BIGINT)) AS PassengerCount\nFROM\n    OPENROWSET(\n        BULK 'https://datalakeytaletu.dfs.core.windows.net/yellowtaxi/nyc/delta/puYear=2010/**',\n        FORMAT = 'PARQUET'\n    ) AS [result]\nGROUP BY rateCodeId;",
					"metadata": {
						"language": "sql"
					},
					"currentConnection": {
						"databaseName": "LogicalDWH",
						"poolName": "Built-in"
					},
					"resultLimit": 5000
				},
				"type": "SqlQuery"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/cetas')]",
			"type": "Microsoft.Synapse/workspaces/sqlscripts",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"folder": {
					"name": "sanfrancisco/serverless/cetas"
				},
				"content": {
					"query": "USE LogicalDWH;\nGO\n\nCREATE EXTERNAL FILE FORMAT [parquet] WITH (FORMAT_TYPE = PARQUET);\nGO\n\nCREATE EXTERNAL DATA SOURCE [sanfranciscofireworkers] WITH (LOCATION = 'abfss://sanfranciscofireworkersdata@datalakeytaletu.dfs.core.windows.net/sanfrancisco/raw/', CREDENTIAL = [SynapseIdentity]);\nGO\n\nCREATE EXTERNAL TABLE ldw.call_2020_agg\n\tWITH (\n\tLOCATION = '2020/',\n\tDATA_SOURCE = [sanfranciscofireworkers],\n\tFILE_FORMAT = [parquet]\n\t) AS\nSELECT\n    DATENAME(MONTH, dateTime) AS monthname\n    ,dataType\n    ,dataSubtype\n    ,subcategory\n    ,COUNT(*) AS num\nFROM\n    OPENROWSET(\n        BULK 'https://datalakeytaletu.dfs.core.windows.net/sanfranciscofireworkersdata/sanfrancisco/parquet/year=2020/month=*/**',\n        FORMAT = 'PARQUET'\n    ) AS [result]\nGROUP BY DATENAME(MONTH, dateTime), dataType, dataSubtype, subcategory;\n",
					"metadata": {
						"language": "sql"
					},
					"currentConnection": {
						"databaseName": "LogicalDWH",
						"poolName": "Built-in"
					},
					"resultLimit": 5000
				},
				"type": "SqlQuery"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/create-logicaldwh')]",
			"type": "Microsoft.Synapse/workspaces/sqlscripts",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"folder": {
					"name": "sanfrancisco/serverless/cetas"
				},
				"content": {
					"query": "CREATE DATABASE LogicalDWH \n                COLLATE Latin1_General_100_BIN2_UTF8;\nGO\n\nUSE LogicalDWH;\nGO\n\nCREATE MASTER KEY ENCRYPTION BY PASSWORD = 'password.1!!';\nGO\n\nCREATE DATABASE SCOPED CREDENTIAL SynapseIdentity\nWITH IDENTITY = 'Managed Identity';\nGO\n\nCREATE SCHEMA ldw;\nGO",
					"metadata": {
						"language": "sql"
					},
					"currentConnection": {
						"databaseName": "LogicalDWH",
						"poolName": "Built-in"
					},
					"resultLimit": 5000
				},
				"type": "SqlQuery"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/csv-parserversion')]",
			"type": "Microsoft.Synapse/workspaces/sqlscripts",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"folder": {
					"name": "sanfrancisco/serverless/parser-version"
				},
				"content": {
					"query": "SELECT\n    COUNT(*) AS num\nFROM\n    OPENROWSET(\n        BULK 'https://datalakeytaletu.dfs.core.windows.net/sanfranciscofireworkersdata/sanfrancisco/csv/year=2001/month=01/**',\n        FORMAT = 'CSV',\n        HEADER_ROW = TRUE,\n        FIELDTERMINATOR = '|',\n        FIELDQUOTE = '\"',\n        PARSER_VERSION = '2.0'\n    ) WITH (\n        dataType            VARCHAR(1000)\n        ,dataSubtype        VARCHAR(1000)\n        ,dateTime           DATETIME2\n        ,category           VARCHAR(1000)\n        ,subcategory        VARCHAR(1000)\n        ,status             VARCHAR(1000)\n        ,address            VARCHAR(1000)\n        ,latitude           FLOAT\n        ,longitude          FLOAT\n        ,source             VARCHAR(1000)\n        ,extendedProperties VARCHAR(1000)\n    ) AS [result];\n\nSELECT\n    COUNT(*) AS num\nFROM\n    OPENROWSET(\n        BULK 'https://datalakeytaletu.dfs.core.windows.net/sanfranciscofireworkersdata/sanfrancisco/csv/year=2001/month=01/**',\n        FORMAT = 'CSV',\n        HEADER_ROW = TRUE,\n        FIELDTERMINATOR = '|',\n        FIELDQUOTE = '\"',\n        PARSER_VERSION = '1.0'\n    ) WITH (\n        dataType            VARCHAR(1000)\n        ,dataSubtype        VARCHAR(1000)\n        ,dateTime           DATETIME2\n        ,category           VARCHAR(1000)\n        ,subcategory        VARCHAR(1000)\n        ,status             VARCHAR(1000)\n        ,address            VARCHAR(1000)\n        ,latitude           FLOAT\n        ,longitude          FLOAT\n        ,source             VARCHAR(1000)\n        ,extendedProperties VARCHAR(1000)\n    ) AS [result];\n",
					"metadata": {
						"language": "sql"
					},
					"currentConnection": {
						"databaseName": "master",
						"poolName": "Built-in"
					},
					"resultLimit": 5000
				},
				"type": "SqlQuery"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/csv-performance-taxi')]",
			"type": "Microsoft.Synapse/workspaces/sqlscripts",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"folder": {
					"name": "taxi/serverless/csv-vs-parquet"
				},
				"content": {
					"query": "-- This is auto-generated code\nSELECT\n    TOP 1 *\nFROM\n    OPENROWSET(\n        BULK 'https://datalakeytaletu.dfs.core.windows.net/yellowtaxi/nyc/csv/puYear=2010/puMonth=01/**',\n        FORMAT = 'CSV',\n        HEADER_ROW = TRUE,\n        FIELDTERMINATOR = '|',\n        FIELDQUOTE = '\"',\n        PARSER_VERSION = '2.0'\n    ) AS [result];\n\n/*\nStatement ID: {E88931D2-0017-4D92-AA26-23A19FCEF1E2} | Query hash: 0xCC5EFD1C8FDFE143 | Distributed request ID: {D313A941-724D-4624-BA3B-221FA315862D}. Total size of data scanned is 3 megabytes, total size of data moved is 1 megabytes, total size of data written is 0 megabytes.\n(1 record affected)\n*/\n\n-----------------------------------------------------\n\nSELECT\n    paymentType\n    ,count(*) as num\nFROM\n    OPENROWSET(\n        BULK 'https://datalakeytaletu.dfs.core.windows.net/yellowtaxi/nyc/csv/puYear=2010/puMonth=01/**',\n        FORMAT = 'CSV',\n        HEADER_ROW = TRUE,\n        FIELDTERMINATOR = '|',\n        FIELDQUOTE = '\"',\n        PARSER_VERSION = '2.0'\n    ) AS [result]\nGROUP BY paymentType\nORDER BY num DESC;\n\n/*\nStatement ID: {B00240AD-EE3C-41EB-9106-1BB3B9D4D057} | Query hash: 0x9F2693848479C4DF | Distributed request ID: {5DDC56E8-9B43-44C1-A5F6-7402C626D321}. Total size of data scanned is 3673 megabytes, total size of data moved is 1 megabytes, total size of data written is 0 megabytes.\n(6 records affected)\n*/\n\n-----------------------------------------------------\n\nSELECT TOP 100000\n    tpepPickupDateTime\n    ,paymentType\n    ,passengerCount\nFROM\n    OPENROWSET(\n        BULK 'https://datalakeytaletu.dfs.core.windows.net/yellowtaxi/nyc/csv/puYear=2010/puMonth=01/**',\n        FORMAT = 'CSV',\n        HEADER_ROW = TRUE,\n        FIELDTERMINATOR = '|',\n        FIELDQUOTE = '\"',\n        PARSER_VERSION = '2.0'\n    ) AS [result];\n\n/*\nStatement ID: {DC781DF1-C33E-4315-B79F-8A2AD4A7A984} | Query hash: 0x653D0D0BEBDE4F4A | Distributed request ID: {E72FAA28-A95B-4AB9-91FC-7F398CD09B73}. Total size of data scanned is 70 megabytes, total size of data moved is 9 megabytes, total size of data written is 0 megabytes.\n(5000 records affected)\n*/\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n",
					"metadata": {
						"language": "sql"
					},
					"currentConnection": {
						"databaseName": "master",
						"poolName": "Built-in"
					},
					"resultLimit": 5000
				},
				"type": "SqlQuery"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/csv-performance')]",
			"type": "Microsoft.Synapse/workspaces/sqlscripts",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"folder": {
					"name": "sanfrancisco/serverless/csv-vs-parquet"
				},
				"content": {
					"query": "-- This is auto-generated code\nSELECT\n    TOP 1 *\nFROM\n    OPENROWSET(\n        BULK 'https://datalakeytaletu.dfs.core.windows.net/sanfranciscofireworkersdata/sanfrancisco/csv/year=2001/month=01/**',\n        FORMAT = 'CSV',\n        HEADER_ROW = TRUE,\n        FIELDTERMINATOR = '|',\n        FIELDQUOTE = '\"',\n        PARSER_VERSION = '2.0'\n    ) AS [result];\n\n\n/*\nStatement ID: {CC3C6A40-54C6-4628-A1D0-84FFDBBFF21E} | Query hash: 0xF41C5FA9D03F2608 | Distributed request ID: {53BB2410-07D5-4AA3-8787-D3E88212F4F1}. Total size of data scanned is 1 megabytes, total size of data moved is 1 megabytes, total size of data written is 0 megabytes.\n(1 record affected)\n*/\n\n-----------------------------------------------------\n\nSELECT\n    subcategory\n    ,count(*) as num\nFROM\n    OPENROWSET(\n        BULK 'https://datalakeytaletu.dfs.core.windows.net/sanfranciscofireworkersdata/sanfrancisco/csv/year=2001/month=01/**',\n        FORMAT = 'CSV',\n        HEADER_ROW = TRUE,\n        FIELDTERMINATOR = '|',\n        FIELDQUOTE = '\"',\n        PARSER_VERSION = '2.0'\n    )  \n    -- WITH (\n    --     dataType            VARCHAR(1000)\n    --     ,dataSubtype        VARCHAR(1000)\n    --     ,dateTime           DATETIME2\n    --     ,category           VARCHAR(1000)\n    --     ,subcategory        VARCHAR(1000)\n    --     ,status             VARCHAR(1000)\n    --     ,address            VARCHAR(1000)\n    --     ,latitude           FLOAT\n    --     ,longitude          FLOAT\n    --     ,source             VARCHAR(1000)\n    --     ,extendedProperties VARCHAR(1000)\n    -- ) \n    AS [result]\nGROUP BY subcategory\nORDER BY num DESC;\n\n/*\nStatement ID: {453947E4-6AAD-464B-82EC-514D27A8DF8C} | Query hash: 0x3D802392914EB552 | Distributed request ID: {3086A895-CC5C-49DF-B786-D7E7DD25CEBE}. Total size of data scanned is 5 megabytes, total size of data moved is 1 megabytes, total size of data written is 0 megabytes.\n(21 records affected)\n*/\n\n-----------------------------------------------------\n\nSELECT\n    subcategory\n    ,dateTime\n    ,address\nFROM\n    OPENROWSET(\n        BULK 'https://datalakeytaletu.dfs.core.windows.net/sanfranciscofireworkersdata/sanfrancisco/csv/year=2001/month=01/**',\n        FORMAT = 'CSV',\n        HEADER_ROW = TRUE,\n        FIELDTERMINATOR = '|',\n        FIELDQUOTE = '\"',\n        PARSER_VERSION = '2.0'\n    ) AS [result];\n\n/*Statement ID: {ED699EC4-6C9F-44EB-A6F2-85D5BD429F51} | Query hash: 0xBDEC233069A302C | Distributed request ID: {AD22B674-DD6A-44A3-A287-EBB8E01068BB}. Total size of data scanned is 3 megabytes, total size of data moved is 1 megabytes, total size of data written is 0 megabytes.\n(5021 records affected)\n*/\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n",
					"metadata": {
						"language": "sql"
					},
					"currentConnection": {
						"databaseName": "master",
						"poolName": "Built-in"
					},
					"resultLimit": 5000
				},
				"type": "SqlQuery"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/delta-query')]",
			"type": "Microsoft.Synapse/workspaces/sqlscripts",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"folder": {
					"name": "sanfrancisco/serverless/delta"
				},
				"content": {
					"query": "-- This is auto-generated code\nSELECT\n    TOP 100 *\nFROM\n    OPENROWSET(\n        BULK 'https://datalakeytaletu.dfs.core.windows.net/sanfranciscofireworkersdata/sanfrancisco/delta/',\n        FORMAT = 'DELTA'\n    ) AS [result];\n",
					"metadata": {
						"language": "sql"
					},
					"currentConnection": {
						"databaseName": "master",
						"poolName": "Built-in"
					},
					"resultLimit": 5000
				},
				"type": "SqlQuery"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/extTable-csv-statistics')]",
			"type": "Microsoft.Synapse/workspaces/sqlscripts",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"folder": {
					"name": "taxi/serverless/statistics"
				},
				"content": {
					"query": "/*\nhttps://learn.microsoft.com/en-us/azure/synapse-analytics/sql/develop-tables-statistics\n*/\n\n----- usare database per Serverless \n\nUSE LogicalDWH;\nGO\n\n----- creare formato del file (in questo caso la fonte dato e' gia' stata creata)\n\nCREATE EXTERNAL FILE FORMAT [csv_taxi] \n\tWITH ( FORMAT_TYPE = DELIMITEDTEXT ,\n\t       FORMAT_OPTIONS (FIELD_TERMINATOR = '|', FIRST_ROW = 2, USE_TYPE_DEFAULT = FALSE)\n\t\t   );\nGO\n\n----- creare external table\n\nCREATE EXTERNAL TABLE taxi.payment_2015_csv\n\tWITH (\n\tLOCATION = '2015/',\n\tDATA_SOURCE = [nyctaxi],\n\tFILE_FORMAT = [csv_taxi]\n\t) AS\nSELECT\n    tpepPickupDateTime\n    ,paymentType\n    ,totalAmount\nFROM\n    OPENROWSET(\n        BULK 'https://datalakeytaletu.dfs.core.windows.net/yellowtaxi/nyc/csv/puYear=2015/**',\n        FORMAT = 'CSV',\n        HEADER_ROW = TRUE,\n        FIELDTERMINATOR = '|',\n        FIELDQUOTE = '\"',\n        PARSER_VERSION = '2.0'\n    ) AS [result];\n-- no statistiche create\n-----\n\nSELECT top 1000 * FROM taxi.payment_2015_csv\n----- statistiche non create per questa query\n-----\n-- lancio 1\nSELECT\n    DATENAME(MONTH, tpepPickupDateTime) AS monthName\n    ,paymentType\n    ,AVG(totalAmount) avgTotalAmount\n    ,count(*) as numRows\nFROM taxi.payment_2015_csv\nGROUP BY paymentType, DATENAME(MONTH, tpepPickupDateTime)\n/*\nStatement ID: {7CF6E133-3A79-4AC9-AC0D-00ED639278AF} | Query hash: 0x5719087CDDA024DF | Distributed request ID: {FDBA24F2-0A52-4AD6-B2FB-E51653220C67}. Total size of data scanned is 6728 megabytes, total size of data moved is 1 megabytes, total size of data written is 0 megabytes.\n(59 records affected)\n\nTotal execution time: 00:00:23.797\n*/\n-- creato solo Internal Cardinality Query (7 sec)\n\n-- lancio 2\nSELECT\n    DATENAME(MONTH, tpepPickupDateTime) AS monthName\n    ,paymentType\n    ,AVG(totalAmount) avgTotalAmount\n    ,count(*) as numRows\nFROM taxi.payment_2015_csv\nGROUP BY paymentType, DATENAME(MONTH, tpepPickupDateTime)\n/*\nStatement ID: {0819995E-848B-4B3C-94BA-1A7F2C9E7B82} | Query hash: 0x5719087CDDA024DF | Distributed request ID: {8A4A2EB2-6F3E-45B7-B28A-93D0EDB24785}. Total size of data scanned is 6728 megabytes, total size of data moved is 1 megabytes, total size of data written is 0 megabytes.\n(59 records affected)\n\nTotal execution time: 00:00:17.429\n*/\n-- non ha creato nulla. NOTA: 23.7 - 17.4 = circa 7 secondi (overhead della Internal Cardinality Query)\n\n-- creo statistiche:\nCREATE STATISTICS puDateTime_Stats\nON taxi.payment_2015_csv(tpepPickupDateTime)\nWITH FULLSCAN, NORECOMPUTE\nGO\n\nCREATE STATISTICS paymentType_Stats\nON taxi.payment_2015_csv(paymentType)\nWITH FULLSCAN, NORECOMPUTE\nGO\n\n-- lancio 3\nSELECT\n    DATENAME(MONTH, tpepPickupDateTime) AS monthName\n    ,paymentType\n    ,AVG(totalAmount) avgTotalAmount\n    ,count(*) as numRows\nFROM taxi.payment_2015_csv\nGROUP BY paymentType, DATENAME(MONTH, tpepPickupDateTime)\n/*\nStatement ID: {70F00262-3658-4E0E-8E07-5F1F09A77756} | Query hash: 0x5719087CDDA024DF | Distributed request ID: {5DD9F88A-5608-44DC-BF61-8799A9CAE8BC}. Total size of data scanned is 6728 megabytes, total size of data moved is 3585 megabytes, total size of data written is 0 megabytes.\n(59 records affected)\n\nTotal execution time: 00:00:28.146\n*/\n\n-- lancio 4\nSELECT\n    DATENAME(MONTH, tpepPickupDateTime) AS monthName\n    ,paymentType\n    ,AVG(totalAmount) avgTotalAmount\n    ,count(*) as numRows\nFROM taxi.payment_2015_csv\nGROUP BY paymentType, DATENAME(MONTH, tpepPickupDateTime)\n/*\nStatement ID: {13F23D57-779D-4E9C-8B54-1B44ABEC4A9C} | Query hash: 0x5719087CDDA024DF | Distributed request ID: {F7D71C00-F176-4C3B-AC0B-A79C87836463}. Total size of data scanned is 6728 megabytes, total size of data moved is 3585 megabytes, total size of data written is 0 megabytes.\n(59 records affected)\n\nTotal execution time: 00:00:23.698\n*/\n\n\n\n\n\n\n",
					"metadata": {
						"language": "sql"
					},
					"currentConnection": {
						"databaseName": "LogicalDWH",
						"poolName": "Built-in"
					},
					"resultLimit": 5000
				},
				"type": "SqlQuery"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/extTable-parquet')]",
			"type": "Microsoft.Synapse/workspaces/sqlscripts",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"folder": {
					"name": "iss-position"
				},
				"content": {
					"query": "-- Creazione di una external table senza il metodo CETAS\nCREATE EXTERNAL TABLE iss.ext_position (\n\t[timestamp] bigint,\n\t[message] varchar(20),\n\t[latitude] varchar(20),\n\t[longitude] varchar(20)\n\t)\n\tWITH (\n\tLOCATION = 'raw/serverless/parquet/**',\n\tDATA_SOURCE = [iss],\n\tFILE_FORMAT = [parquet]\n\t);\nGO\n\n-- Il lancio della query, mi fa ritrovare i nuovi record (ho specificato solo la sorgente al momento della creazione)\nSELECT * FROM iss.ext_position;\n",
					"metadata": {
						"language": "sql"
					},
					"currentConnection": {
						"databaseName": "LogicalDWH",
						"poolName": "Built-in"
					},
					"resultLimit": 5000
				},
				"type": "SqlQuery"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/non-optimized-query')]",
			"type": "Microsoft.Synapse/workspaces/sqlscripts",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"folder": {
					"name": "sanfrancisco/serverless/optimize-delta"
				},
				"content": {
					"query": "SELECT\n    subcategory\n    ,COUNT(*) AS num\n    ,CAST(dateTime AS DATE) as [date]\nFROM\n    OPENROWSET(\n        BULK 'https://datalakeytaletu.dfs.core.windows.net/sanfranciscofireworkersdata/sanfrancisco/delta/',\n        FORMAT = 'DELTA'\n    ) AS [result]\nWHERE CAST(dateTime AS DATE) = '20010101'\nGROUP BY subcategory, CAST(dateTime AS DATE);\n-- Total size of data scanned is 530 megabytes, Total execution time: 00:01:59.655",
					"metadata": {
						"language": "sql"
					},
					"currentConnection": {
						"databaseName": "master",
						"poolName": "Built-in"
					},
					"resultLimit": 5000
				},
				"type": "SqlQuery"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/non-partitioned')]",
			"type": "Microsoft.Synapse/workspaces/sqlscripts",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"folder": {
					"name": "sanfrancisco/serverless/partitioning"
				},
				"content": {
					"query": "SELECT TOP 3\n    [year]\n    ,subcategory\n    ,COUNT(*) AS num\nFROM\n    OPENROWSET(\n        BULK 'https://datalakeytaletu.dfs.core.windows.net/sanfranciscofireworkersdata/sanfrancisco/nonPartitionedParquet/**',\n        FORMAT = 'PARQUET'\n    ) AS [result]\nWHERE [year] = '2001'\nGROUP BY subcategory, [year]\nORDER BY num DESC",
					"metadata": {
						"language": "sql"
					},
					"currentConnection": {
						"databaseName": "master",
						"poolName": "Built-in"
					},
					"resultLimit": 5000
				},
				"type": "SqlQuery"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/optimize-listing-files')]",
			"type": "Microsoft.Synapse/workspaces/sqlscripts",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"folder": {
					"name": "sanfrancisco/serverless/listing-files"
				},
				"content": {
					"query": "-- 1 folder con tutti i file\nSELECT\n    TOP 1 *\nFROM\n    OPENROWSET(\n        BULK 'https://datalakeytaletu.dfs.core.windows.net/sanfranciscofireworkersdata/sanfrancisco/nonPartitionedParquet/*.parquet',\n        FORMAT = 'PARQUET'\n    ) AS [result];\n\n-- Total size of data scanned is 49 megabytes, Total execution time: 00:00:08.246\n\n-- 22 cartelle (years) x 12 mesi (month) x 30/31 giorni (day_month)\nSELECT\n    TOP 1 *\nFROM\n    OPENROWSET(\n        BULK 'https://datalakeytaletu.dfs.core.windows.net/sanfranciscofireworkersdata/sanfrancisco/parquet/*/*/*/*.parquet',\n        FORMAT = 'PARQUET'\n    ) AS [result];\n\n-- Total size of data scanned is 1 megabytes, Total execution time: 00:01:12.860",
					"metadata": {
						"language": "sql"
					},
					"currentConnection": {
						"databaseName": "master",
						"poolName": "Built-in"
					},
					"resultLimit": 5000
				},
				"type": "SqlQuery"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/optimized-query')]",
			"type": "Microsoft.Synapse/workspaces/sqlscripts",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"folder": {
					"name": "sanfrancisco/serverless/optimize-delta"
				},
				"content": {
					"query": "SELECT\n    subcategory\n    ,COUNT(*) AS num\n    ,CAST(dateTime AS DATE) as [date]\nFROM\n    OPENROWSET(\n        BULK 'https://datalakeytaletu.dfs.core.windows.net/sanfranciscofireworkersdata/sanfrancisco/deltaoptimize/',\n        FORMAT = 'DELTA'\n    ) AS [result]\nWHERE CAST(dateTime AS DATE) = '20010101'\nGROUP BY subcategory, CAST(dateTime AS DATE);\n-- Total size of data scanned is 148 megabytes, Total execution time: 00:00:17.255",
					"metadata": {
						"language": "sql"
					},
					"currentConnection": {
						"databaseName": "master",
						"poolName": "Built-in"
					},
					"resultLimit": 5000
				},
				"type": "SqlQuery"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/parquet-partition-types-performance')]",
			"type": "Microsoft.Synapse/workspaces/sqlscripts",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"folder": {
					"name": "taxi/serverless/parquet-performance"
				},
				"content": {
					"query": "-- no partition\nSELECT\n    paymentType\n    ,count(*) as num\nFROM\n    OPENROWSET(\n        BULK 'https://datalakeytaletu.dfs.core.windows.net/yellowtaxi/nyc/nonPartitionedParquet/**',\n        FORMAT = 'PARQUET'\n    ) AS [result]\nWHERE CONVERT(DATE, tpepPickupDateTime) = '20100101' \nGROUP BY paymentType\nORDER BY num DESC;\n\n/*\nStatement ID: {8D11681C-846B-4AC3-B11E-22D756CAAD56} | Query hash: 0x65FDC93AAB0473B9 | Distributed request ID: {64AE41C8-0B4B-474D-8FB9-A33386C38AFB}. Total size of data scanned is 19625 megabytes, total size of data moved is 1 megabytes, total size of data written is 0 megabytes.\n(4 records affected)\n\nTotal execution time: 00:01:03.846\n*/\n\n-- year month partition\nSELECT\n    paymentType\n    ,count(*) as num\nFROM\n    OPENROWSET(\n        BULK 'https://datalakeytaletu.dfs.core.windows.net/yellowtaxi/nyc/delta/puYear=2010/puMonth=01/**',\n        FORMAT = 'PARQUET'\n    ) AS [result]\nWHERE puDay = '01'\nGROUP BY paymentType\nORDER BY num DESC;\n\n/*\nStatement ID: {96827B68-F4E9-4D1D-AD36-EFD294A4B1EF} | Query hash: 0x39A2453CDE02D22F | Distributed request ID: {35025942-1EFD-40EA-BF99-218F138ED0A6}. Total size of data scanned is 32 megabytes, total size of data moved is 1 megabytes, total size of data written is 0 megabytes.\n(4 records affected)\n\nTotal execution time: 00:00:09.404\n*/\n\n-- year month day partition\nSELECT\n    paymentType\n    ,count(*) as num\nFROM\n    OPENROWSET(\n        BULK 'https://datalakeytaletu.dfs.core.windows.net/yellowtaxi/nyc/parquet/puYear=2010/puMonth=01/puDay=01/**',\n        FORMAT = 'PARQUET'\n    ) AS [result]\nGROUP BY paymentType\nORDER BY num DESC;\n\n/*\nStatement ID: {FF406F92-0562-493F-8384-D3073C94D84F} | Query hash: 0x9F2693848479C4DF | Distributed request ID: {B2E77C73-DF38-4DA0-85ED-F5AD058650B1}. Total size of data scanned is 2 megabytes, total size of data moved is 1 megabytes, total size of data written is 0 megabytes.\n(4 records affected)\n\nTotal execution time: 00:00:09.611\n*/\n",
					"metadata": {
						"language": "sql"
					},
					"currentConnection": {
						"databaseName": "master",
						"poolName": "Built-in"
					},
					"resultLimit": 5000
				},
				"type": "SqlQuery"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/parquet-performance-taxi')]",
			"type": "Microsoft.Synapse/workspaces/sqlscripts",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"folder": {
					"name": "taxi/serverless/csv-vs-parquet"
				},
				"content": {
					"query": "-- This is auto-generated code\nSELECT\n    TOP 1 *\nFROM\n    OPENROWSET(\n        BULK 'https://datalakeytaletu.dfs.core.windows.net/yellowtaxi/nyc/parquet/puYear=2010/puMonth=01/**',\n        FORMAT = 'PARQUET'\n    ) AS [result];\n\n/*\nStatement ID: {A7C65281-D86A-4C74-B287-DAD11CE942CA} | Query hash: 0xCC5EFD1C8FDFE143 | Distributed request ID: {61ABC47A-443E-4B3B-ACE7-742E3AECCEE7}. Total size of data scanned is 10 megabytes, total size of data moved is 1 megabytes, total size of data written is 0 megabytes.\n(1 record affected)\n*/\n\n-----------------------------------------------\n\nSELECT\n    paymentType\n    ,count(*) as num\nFROM\n    OPENROWSET(\n        BULK 'https://datalakeytaletu.dfs.core.windows.net/yellowtaxi/nyc/parquet/puYear=2010/puMonth=01/**',\n        FORMAT = 'PARQUET'\n    ) AS [result]\nGROUP BY paymentType\nORDER BY num DESC;\n\n/*\nStatement ID: {7884FD04-DAB9-43C9-BFEC-F474974014AC} | Query hash: 0x9F2693848479C4DF | Distributed request ID: {3CB1C784-9188-4E46-8BC9-0365726EA1D2}. Total size of data scanned is 51 megabytes, total size of data moved is 1 megabytes, total size of data written is 0 megabytes.\n(6 records affected)\n*/\n\n-----------------------------------------------\n\nSELECT TOP 100000\n    tpepPickupDateTime\n    ,paymentType\n    ,passengerCount\nFROM\n    OPENROWSET(\n        BULK 'https://datalakeytaletu.dfs.core.windows.net/yellowtaxi/nyc/parquet/puYear=2010/puMonth=01/**',\n        FORMAT = 'PARQUET'\n    ) AS [result];\n\n/*\nStatement ID: {68749C7D-6ABC-4096-A451-3EE60A252F6A} | Query hash: 0x653D0D0BEBDE4F4A | Distributed request ID: {2092BBB8-8BCF-4740-9AB2-A3A79AAD4D58}. Total size of data scanned is 8 megabytes, total size of data moved is 10 megabytes, total size of data written is 0 megabytes.\n(5000 records affected)\n*/",
					"metadata": {
						"language": "sql"
					},
					"currentConnection": {
						"databaseName": "master",
						"poolName": "Built-in"
					},
					"resultLimit": 5000
				},
				"type": "SqlQuery"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/parquet-performance')]",
			"type": "Microsoft.Synapse/workspaces/sqlscripts",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"folder": {
					"name": "sanfrancisco/serverless/csv-vs-parquet"
				},
				"content": {
					"query": "-- This is auto-generated code\nSELECT\n    TOP 1 *\nFROM\n    OPENROWSET(\n        BULK 'https://datalakeytaletu.dfs.core.windows.net/sanfranciscofireworkersdata/sanfrancisco/parquet/year=2001/month=01/**',\n        FORMAT = 'PARQUET'\n    ) AS [result];\n\n/*\nStatement ID: {F8BC50F2-8CDD-42E9-BFB6-A068C9271284} | Query hash: 0xF41C5FA9D03F2608 | Distributed request ID: {F2C188D8-D2D1-42A6-AC4C-FE620E552B13}. Total size of data scanned is 1 megabytes, total size of data moved is 1 megabytes, total size of data written is 0 megabytes.\n(1 record affected)\n*/\n\n-----------------------------------------------\n\nSELECT\n    subcategory\n    ,count(*) as num\nFROM\n    OPENROWSET(\n        BULK 'https://datalakeytaletu.dfs.core.windows.net/sanfranciscofireworkersdata/sanfrancisco/parquet/year=2001/month=01/**',\n        FORMAT = 'PARQUET'\n    ) AS [result]\nGROUP BY subcategory\nORDER BY num DESC;\n\n/*\nStatement ID: {5735D31F-971A-4B8A-BDC0-C80AB3558CF6} | Query hash: 0x3D802392914EB552 | Distributed request ID: {F67C32A1-9163-4E70-93CF-067AAFBDA0AC}. Total size of data scanned is 4 megabytes, total size of data moved is 1 megabytes, total size of data written is 0 megabytes.\n(21 records affected)\n*/\n\n-----------------------------------------------\n\nSELECT\n    subcategory\n    ,dateTime\n    ,address\nFROM\n    OPENROWSET(\n        BULK 'https://datalakeytaletu.dfs.core.windows.net/sanfranciscofireworkersdata/sanfrancisco/parquet/year=2001/month=01/**',\n        FORMAT = 'PARQUET'\n    ) AS [result]\n\n/*\nStatement ID: {EB94DD3F-6C4F-41E0-8E50-1AFB261D6CBC} | Query hash: 0xBDEC233069A302C | Distributed request ID: {CFA5D8C1-3604-487B-B191-A78F8EB979F3}. Total size of data scanned is 2 megabytes, total size of data moved is 1 megabytes, total size of data written is 0 megabytes.\n(5021 records affected)\n*/",
					"metadata": {
						"language": "sql"
					},
					"currentConnection": {
						"databaseName": "master",
						"poolName": "Built-in"
					},
					"resultLimit": 5000
				},
				"type": "SqlQuery"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/partitioned-cast')]",
			"type": "Microsoft.Synapse/workspaces/sqlscripts",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"folder": {
					"name": "sanfrancisco/serverless/partitioning"
				},
				"content": {
					"query": "SELECT TOP 3\n    CAST([result].filepath(1) AS SMALLINT) AS [year]\n    ,subcategory\n    ,COUNT(*) AS num\nFROM\n    OPENROWSET(\n        BULK 'https://datalakeytaletu.dfs.core.windows.net/sanfranciscofireworkersdata/sanfrancisco/parquet/year=*/**',\n        FORMAT = 'PARQUET'\n    ) AS [result]\nWHERE CAST([result].filepath(1) AS SMALLINT) = '2001'\nGROUP BY subcategory, CAST([result].filepath(1) AS SMALLINT)\nORDER BY num DESC",
					"metadata": {
						"language": "sql"
					},
					"currentConnection": {
						"databaseName": "master",
						"poolName": "Built-in"
					},
					"resultLimit": 5000
				},
				"type": "SqlQuery"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/partitioned')]",
			"type": "Microsoft.Synapse/workspaces/sqlscripts",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"folder": {
					"name": "sanfrancisco/serverless/partitioning"
				},
				"content": {
					"query": "SELECT TOP 3\n    [result].filepath(1) AS [year]\n    ,subcategory\n    ,COUNT(*) AS num\nFROM\n    OPENROWSET(\n        BULK 'https://datalakeytaletu.dfs.core.windows.net/sanfranciscofireworkersdata/sanfrancisco/parquet/year=*/**',\n        FORMAT = 'PARQUET'\n    ) AS [result]\nWHERE [result].filepath(1) = '2001'\nGROUP BY subcategory, [result].filepath(1)\nORDER BY num DESC",
					"metadata": {
						"language": "sql"
					},
					"currentConnection": {
						"databaseName": "master",
						"poolName": "Built-in"
					},
					"resultLimit": 5000
				},
				"type": "SqlQuery"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/query-cetas-iss')]",
			"type": "Microsoft.Synapse/workspaces/sqlscripts",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"folder": {
					"name": "iss-position"
				},
				"content": {
					"query": "SELECT * \nFROM iss.cetas_position\n\n-- Creare una external table con metodo CETAS non vuol dire che continua a prendere dati (nuovi che entrano) dalla posizione di sorgente e non ne crea ulteriori nella posizione di destinazione.\n-- Quindi sto interrogando i dati che ho generato AL MOMENTO della creazione della external table con metodo CETAS",
					"metadata": {
						"language": "sql"
					},
					"currentConnection": {
						"databaseName": "LogicalDWH",
						"poolName": "Built-in"
					},
					"resultLimit": 5000
				},
				"type": "SqlQuery"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/query-extTable-taxi')]",
			"type": "Microsoft.Synapse/workspaces/sqlscripts",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"folder": {
					"name": "taxi/serverless/cetas"
				},
				"content": {
					"query": "-- external table\nSELECT * FROM taxi.rate_2010_agg\n/*\nStatement ID: {3FE2F3E5-BAE4-424A-A449-57BDBF90F49C} | Query hash: 0x45AEFC68D5DEC3D4 | Distributed request ID: {057806A7-165A-4993-969E-B541D102A43B}. Total size of data scanned is 1 megabytes, total size of data moved is 1 megabytes, total size of data written is 0 megabytes.\n(35 records affected)\n\nTotal execution time: 00:00:05.390\n*/",
					"metadata": {
						"language": "sql"
					},
					"currentConnection": {
						"databaseName": "LogicalDWH",
						"poolName": "Built-in"
					},
					"resultLimit": 5000
				},
				"type": "SqlQuery"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/query-extTable')]",
			"type": "Microsoft.Synapse/workspaces/sqlscripts",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"folder": {
					"name": "sanfrancisco/serverless/cetas"
				},
				"content": {
					"query": "-- external table\nSELECT * FROM ldw.call_2020_agg\n-- Total size of data scanned is 1 megabytes, Total execution time: 00:00:05.418",
					"metadata": {
						"language": "sql"
					},
					"currentConnection": {
						"databaseName": "LogicalDWH",
						"poolName": "Built-in"
					},
					"resultLimit": 5000
				},
				"type": "SqlQuery"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/query-iss-json')]",
			"type": "Microsoft.Synapse/workspaces/sqlscripts",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"folder": {
					"name": "iss-position"
				},
				"content": {
					"query": "-- This is auto-generated code\nSELECT\n    b.[timestamp]\n    ,b.[message] \n    ,c.*\nFROM (\n    SELECT \n        jsonContent\n    FROM\n        OPENROWSET(\n            BULK 'https://datalakeytaletu.dfs.core.windows.net/iss-position/raw/serverless/json/**',\n            FORMAT = 'CSV',\n            FIELDQUOTE = '0x0b',\n            FIELDTERMINATOR ='0x0b',\n            ROWTERMINATOR = '0x0b'\n        )\n        WITH (\n            jsonContent varchar(MAX)\n        ) AS [result]\n    ) AS a\n    CROSS APPLY\n    OPENJSON(a.jsonContent) WITH (\n        [timestamp]     BIGINT\n        ,[message]      VARCHAR(20)\n        ,[iss_position] nvarchar(max) AS JSON\n    ) AS b\n    CROSS APPLY\n    OPENJSON(b.[iss_position]) WITH (\n        latitude    VARCHAR(20)\n        ,longitude  VARCHAR(20)\n    ) AS c;\n\n-- Ogni lancio della query (1 lancio al minuto) si aggiunge una riga, perche' entra un nuovo json dalla pipeline\n",
					"metadata": {
						"language": "sql"
					},
					"currentConnection": {
						"databaseName": "master",
						"poolName": "Built-in"
					},
					"resultLimit": 5000
				},
				"type": "SqlQuery"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/query-taxi')]",
			"type": "Microsoft.Synapse/workspaces/sqlscripts",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"folder": {
					"name": "taxi/serverless/cetas"
				},
				"content": {
					"query": "SELECT\n    rateCodeId\n    ,SUM(CAST(passengerCount AS BIGINT)) AS PassengerCount\nFROM\n    OPENROWSET(\n        BULK 'https://datalakeytaletu.dfs.core.windows.net/yellowtaxi/nyc/delta/puYear=2010/**',\n        FORMAT = 'PARQUET'\n    ) AS [result]\nGROUP BY rateCodeId;\n/*\nStatement ID: {23600A17-64CA-4473-BC27-162855F0EDB8} | Query hash: 0x2D8FE73BE2B45DCA | Distributed request ID: {4FCA6E01-A195-43EA-A0BD-061D847A6636}. Total size of data scanned is 95 megabytes, total size of data moved is 1 megabytes, total size of data written is 0 megabytes.\n(35 records affected)\n\nTotal execution time: 00:00:24.373\n*/",
					"metadata": {
						"language": "sql"
					},
					"currentConnection": {
						"databaseName": "master",
						"poolName": "Built-in"
					},
					"resultLimit": 5000
				},
				"type": "SqlQuery"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/query')]",
			"type": "Microsoft.Synapse/workspaces/sqlscripts",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"folder": {
					"name": "sanfrancisco/serverless/cetas"
				},
				"content": {
					"query": "-- query da riutilizzare\nSELECT\n    DATENAME(MONTH, dateTime) AS monthname\n    ,dataType\n    ,dataSubtype\n    ,subcategory\n    ,COUNT(*) AS num\nFROM\n    OPENROWSET(\n        BULK 'https://datalakeytaletu.dfs.core.windows.net/sanfranciscofireworkersdata/sanfrancisco/parquet/year=2020/month=*/**',\n        FORMAT = 'PARQUET'\n    ) AS [result]\nGROUP BY DATENAME(MONTH, dateTime), dataType, dataSubtype, subcategory;\n--  Total size of data scanned is 54 megabytes, Total execution time: 00:00:43.610",
					"metadata": {
						"language": "sql"
					},
					"currentConnection": {
						"databaseName": "LogicalDWH",
						"poolName": "Built-in"
					},
					"resultLimit": 5000
				},
				"type": "SqlQuery"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/statistics-taxi')]",
			"type": "Microsoft.Synapse/workspaces/sqlscripts",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"folder": {
					"name": "taxi/serverless/statistics"
				},
				"content": {
					"query": "-- lanciare 3/4 volte\nSELECT\n    DATENAME(MONTH, tpepPickupDateTime) AS monthName\n    ,paymentType\n    ,count(*) as num\nFROM\n    OPENROWSET(\n        BULK 'https://datalakeytaletu.dfs.core.windows.net/yellowtaxi/nyc/delta/puYear=2015/**',\n        FORMAT = 'PARQUET'\n    ) AS [result]\nGROUP BY paymentType, DATENAME(MONTH, tpepPickupDateTime)\nORDER BY num DESC;\n/*\nStatement ID: {3C7C567F-CC02-4970-905B-AD76922A6CC9} | Query hash: 0x2CE30D7899EBE262 | Distributed request ID: {BE79CC69-AFCD-413D-97D3-719DB0A51DB9}. Total size of data scanned is 1134 megabytes, total size of data moved is 1608 megabytes, total size of data written is 0 megabytes.\n(59 records affected)\n\nTotal execution time: 00:07:07.694\n*/\n\nSELECT DISTINCT\n    vendorID\nFROM\n    OPENROWSET(\n        BULK 'https://datalakeytaletu.dfs.core.windows.net/yellowtaxi/nyc/delta/puYear=2015/**',\n        FORMAT = 'PARQUET'\n    ) AS [result];\n/*\nStatement ID: {B465DF17-537E-4A14-82B5-6C9556419B98} | Query hash: 0xFA39E48DDF423402 | Distributed request ID: {2E1D34CE-37CB-4F7A-BFE5-6B6040F3A787}. Total size of data scanned is 47 megabytes, total size of data moved is 1 megabytes, total size of data written is 0 megabytes.\n(2 records affected)\n\nTotal execution time: 00:00:23.359\n*/",
					"metadata": {
						"language": "sql"
					},
					"currentConnection": {
						"databaseName": "master",
						"poolName": "Built-in"
					},
					"resultLimit": 5000
				},
				"type": "SqlQuery"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/statistics')]",
			"type": "Microsoft.Synapse/workspaces/sqlscripts",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"folder": {
					"name": "sanfrancisco/serverless/statistics"
				},
				"content": {
					"query": "-- lanciare 3/4 volte\nSELECT\n    subcategory\n    ,COUNT(*) AS num\nFROM\n    OPENROWSET(\n        BULK 'https://datalakeytaletu.dfs.core.windows.net/sanfranciscofireworkersdata/sanfrancisco/parquet/year=2020/month=03/**',\n        FORMAT = 'PARQUET'\n    ) AS [result]\nGROUP BY subcategory\nORDER BY num DESC;\n\n--------------------------------------------------------------------\n\nSELECT DISTINCT\n    subcategory\nFROM\n    OPENROWSET(\n        BULK 'https://datalakeytaletu.dfs.core.windows.net/sanfranciscofireworkersdata/sanfrancisco/parquet/year=2020/month=03/**',\n        FORMAT = 'PARQUET'\n    ) AS [result];",
					"metadata": {
						"language": "sql"
					},
					"currentConnection": {
						"databaseName": "master",
						"poolName": "Built-in"
					},
					"resultLimit": 5000
				},
				"type": "SqlQuery"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/stored-procedure')]",
			"type": "Microsoft.Synapse/workspaces/sqlscripts",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"folder": {
					"name": "sanfrancisco/serverless/cetas"
				},
				"content": {
					"query": "CREATE PROCEDURE ldw.ctas_renew\nAS\n    BEGIN\n        IF EXISTS (SELECT [name] FROM [sys].[external_tables] WHERE [name] = 'call_2020_agg')\n        BEGIN\n            DROP EXTERNAL TABLE ldw.call_2020_agg;\n        END\n        CREATE EXTERNAL TABLE ldw.call_2020_agg\n            WITH (\n            LOCATION = '2020/',\n            DATA_SOURCE = [sanfranciscofireworkers],\n            FILE_FORMAT = [parquet]\n            ) AS\n        SELECT\n            DATENAME(MONTH, dateTime) AS monthname\n            ,dataType\n            ,dataSubtype\n            ,subcategory\n            ,COUNT(*) AS num\n        FROM\n            OPENROWSET(\n                BULK 'https://datalakeytaletu.dfs.core.windows.net/sanfranciscofireworkersdata/sanfrancisco/parquet/year=2020/month=*/**',\n                FORMAT = 'PARQUET'\n            ) AS [result]\n        GROUP BY DATENAME(MONTH, dateTime), dataType, dataSubtype, subcategory;            \n    END;",
					"metadata": {
						"language": "sql"
					},
					"currentConnection": {
						"databaseName": "LogicalDWH",
						"poolName": "Built-in"
					},
					"resultLimit": 5000
				},
				"type": "SqlQuery"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/streaming-iss')]",
			"type": "Microsoft.Synapse/workspaces/sqlscripts",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"folder": {
					"name": "iss-position"
				},
				"content": {
					"query": "-- Query che punta al container dove entrano i dati in streaming\nSELECT\n    TOP 100 *\nFROM\n    OPENROWSET(\n        BULK 'https://datalakeytaletu.dfs.core.windows.net/streaming/iss/**',\n        FORMAT = 'PARQUET'\n    ) AS [result];\n\n\n/*\nCreazione di una external table che punta al container streaming, \ndove stanno entrando i dati grazie allo stream analytics job, \nche tramite l'event hub prende i dati che sto richiamando da uno script Python nello Spark pool\n*/\n\n-- Creazione external data source\nCREATE EXTERNAL DATA SOURCE [live] WITH (LOCATION = 'abfss://streaming@datalakeytaletu.dfs.core.windows.net/', CREDENTIAL = [SynapseIdentity]);\nGO\n\n-- Creazione external table\nCREATE EXTERNAL TABLE iss.ext_live_position (\n\t[timestamp] bigint,\n\t[message] varchar(20),\n\t[latitude] varchar(20),\n\t[longitude] varchar(20)\n\t)\n\tWITH (\n\tLOCATION = 'iss/**',\n\tDATA_SOURCE = [live],\n\tFILE_FORMAT = [parquet]\n\t);\nGO\n\n-- Il lancio della query, mi fa ritrovare i nuovi record live\nSELECT * FROM iss.ext_live_position;\n\nSELECT COUNT(*) AS num_rows FROM iss.ext_live_position;",
					"metadata": {
						"language": "sql"
					},
					"currentConnection": {
						"databaseName": "LogicalDWH",
						"poolName": "Built-in"
					},
					"resultLimit": 5000
				},
				"type": "SqlQuery"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/vista-vs-extTable')]",
			"type": "Microsoft.Synapse/workspaces/sqlscripts",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"folder": {
					"name": "iss-position"
				},
				"content": {
					"query": "-- creazione vista che punta ai dati di ingresso (che sta leggendo anche la external table)\nCREATE VIEW iss.vw_position\nAS  \n    SELECT *\n    FROM\n        OPENROWSET(\n            BULK 'https://datalakeytaletu.dfs.core.windows.net/iss-position/raw/serverless/parquet/**',\n            FORMAT = 'PARQUET'\n        ) AS [result];\n\n-- external table creata precedentemente\nSELECT * FROM iss.ext_position\n/*\nStatement ID: {003658F5-4D4B-4323-AF18-1AF87806B862} | Query hash: 0x2A56A01209013C21 | Distributed request ID: {677546CD-1C07-4B9B-9F37-CF0FBD235363}. Total size of data scanned is 1 megabytes, total size of data moved is 1 megabytes, total size of data written is 0 megabytes.\n(30 records affected)\n\nTotal execution time: 00:00:00.990\n*/\n\n-- vista appena creata\nSELECT * FROM iss.vw_position\n/*\nStatement ID: {3651C063-7442-4666-9F4F-35E462CF10DB} | Query hash: 0xD5A7FE4E630A611C | Distributed request ID: {FC9D4F89-0EDA-417F-A3DD-576BBB05C07D}. Total size of data scanned is 1 megabytes, total size of data moved is 1 megabytes, total size of data written is 0 megabytes.\n(30 records affected)\n\nTotal execution time: 00:00:01.360\n*/",
					"metadata": {
						"language": "sql"
					},
					"currentConnection": {
						"databaseName": "LogicalDWH",
						"poolName": "Built-in"
					},
					"resultLimit": 5000
				},
				"type": "SqlQuery"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/create-data-safrancisco')]",
			"type": "Microsoft.Synapse/workspaces/notebooks",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"folder": {
					"name": "adls"
				},
				"nbformat": 4,
				"nbformat_minor": 2,
				"bigDataPool": {
					"referenceName": "DevSparkPool",
					"type": "BigDataPoolReference"
				},
				"sessionProperties": {
					"driverMemory": "28g",
					"driverCores": 4,
					"executorMemory": "28g",
					"executorCores": 4,
					"numExecutors": 2,
					"conf": {
						"spark.dynamicAllocation.enabled": "false",
						"spark.dynamicAllocation.minExecutors": "2",
						"spark.dynamicAllocation.maxExecutors": "2",
						"spark.autotune.trackingId": "84dc63fa-cb4d-4273-8615-45a6360e6814"
					}
				},
				"metadata": {
					"saveOutput": true,
					"enableDebugMode": false,
					"kernelspec": {
						"name": "synapse_pyspark",
						"display_name": "Synapse PySpark"
					},
					"language_info": {
						"name": "python"
					},
					"a365ComputeOptions": {
						"id": "/subscriptions/b812f629-6402-4f69-ab6a-880bd6a5c752/resourceGroups/rg-Youtube/providers/Microsoft.Synapse/workspaces/ws-syn-aletu/bigDataPools/DevSparkPool",
						"name": "DevSparkPool",
						"type": "Spark",
						"endpoint": "https://ws-syn-aletu.dev.azuresynapse.net/livyApi/versions/2019-11-01-preview/sparkPools/DevSparkPool",
						"auth": {
							"type": "AAD",
							"authResource": "https://dev.azuresynapse.net"
						},
						"sparkVersion": "3.3",
						"nodeCount": 3,
						"cores": 4,
						"memory": 28
					},
					"sessionKeepAliveTimeout": 30
				},
				"cells": [
					{
						"cell_type": "code",
						"metadata": {
							"collapsed": false
						},
						"source": [
							"from azureml.opendatasets import SanFranciscoSafety\n",
							"\n",
							"data = SanFranciscoSafety()\n",
							"df = data.to_spark_dataframe()\n",
							"# Display 10 rows\n",
							"display(df.limit(10))\n",
							"df.printSchema()"
						],
						"outputs": [],
						"execution_count": 15
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"from pyspark.sql.functions import lpad, col, month, year, dayofmonth\r\n",
							"from pyspark.sql.types import datetime"
						],
						"outputs": [],
						"execution_count": 16
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"df_date = (df.select('dataType',\r\n",
							"                    'dataSubtype',\r\n",
							"                    'dateTime',\r\n",
							"                    'category',\r\n",
							"                    'subcategory',\r\n",
							"                    'status',\r\n",
							"                    'address',\r\n",
							"                    'latitude',\r\n",
							"                    'longitude',\r\n",
							"                    'source',\r\n",
							"                    'extendedProperties',\r\n",
							"                    year('dateTime').alias('year'), \r\n",
							"                    lpad(month('dateTime'), 2, '0').alias('month'),\r\n",
							"                    lpad(dayofmonth('dateTime'), 2, '0').alias('day_month')\r\n",
							"                    )\r\n",
							"            )\r\n",
							"\r\n",
							"df_date.printSchema()"
						],
						"outputs": [],
						"execution_count": 17
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"(df_date.write\r\n",
							".format('csv')\r\n",
							".mode('overwrite')\r\n",
							".partitionBy('year', 'month', 'day_month')\r\n",
							".option('sep', '|')\r\n",
							".option('header', True)\r\n",
							".save('abfss://sanfranciscofireworkersdata@datalakeytaletu.dfs.core.windows.net/sanfrancisco/csv'))"
						],
						"outputs": [],
						"execution_count": 4
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"(df_date.write\r\n",
							".format('parquet')\r\n",
							".mode('overwrite')\r\n",
							".partitionBy('year', 'month', 'day_month')\r\n",
							".save('abfss://sanfranciscofireworkersdata@datalakeytaletu.dfs.core.windows.net/sanfrancisco/parquet'))"
						],
						"outputs": [],
						"execution_count": 5
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"(df_date.write\r\n",
							".format('parquet')\r\n",
							".mode('overwrite')\r\n",
							".save('abfss://sanfranciscofireworkersdata@datalakeytaletu.dfs.core.windows.net/sanfrancisco/nonPartitionedParquet'))"
						],
						"outputs": [],
						"execution_count": 20
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"(df_date.write\r\n",
							".format('delta')\r\n",
							".mode('overwrite')\r\n",
							".partitionBy('year', 'month', 'day_month')\r\n",
							".save('abfss://sanfranciscofireworkersdata@datalakeytaletu.dfs.core.windows.net/sanfrancisco/delta'))"
						],
						"outputs": [],
						"execution_count": 6
					}
				]
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/create-data-sales')]",
			"type": "Microsoft.Synapse/workspaces/notebooks",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"folder": {
					"name": "streaming"
				},
				"nbformat": 4,
				"nbformat_minor": 2,
				"bigDataPool": {
					"referenceName": "DevSparkPool",
					"type": "BigDataPoolReference"
				},
				"sessionProperties": {
					"driverMemory": "28g",
					"driverCores": 4,
					"executorMemory": "28g",
					"executorCores": 4,
					"numExecutors": 2,
					"conf": {
						"spark.dynamicAllocation.enabled": "false",
						"spark.dynamicAllocation.minExecutors": "2",
						"spark.dynamicAllocation.maxExecutors": "2",
						"spark.autotune.trackingId": "9dd3c067-fa93-4200-83c1-0549049cf59e"
					}
				},
				"metadata": {
					"saveOutput": true,
					"enableDebugMode": false,
					"kernelspec": {
						"name": "synapse_pyspark",
						"display_name": "Synapse PySpark"
					},
					"language_info": {
						"name": "python"
					},
					"a365ComputeOptions": {
						"id": "/subscriptions/b812f629-6402-4f69-ab6a-880bd6a5c752/resourceGroups/rg-Youtube/providers/Microsoft.Synapse/workspaces/ws-syn-aletu/bigDataPools/DevSparkPool",
						"name": "DevSparkPool",
						"type": "Spark",
						"endpoint": "https://ws-syn-aletu.dev.azuresynapse.net/livyApi/versions/2019-11-01-preview/sparkPools/DevSparkPool",
						"auth": {
							"type": "AAD",
							"authResource": "https://dev.azuresynapse.net"
						},
						"sparkVersion": "3.3",
						"nodeCount": 3,
						"cores": 4,
						"memory": 28
					},
					"sessionKeepAliveTimeout": 30
				},
				"cells": [
					{
						"cell_type": "code",
						"source": [
							"print('ready')"
						],
						"outputs": [],
						"execution_count": 2
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"import json\r\n",
							"import random\r\n",
							"import time\r\n",
							"\r\n",
							"while True:\r\n",
							"    # Generiamo alcuni dati casuali per simulare la vendita di un prodotto online\r\n",
							"    product = random.choice(['t-shirt', 'jeans', 'scarpe', 'borsa'])\r\n",
							"    quantity = random.randint(1, 10)\r\n",
							"    price = round(random.uniform(10.0, 100.0), 2)\r\n",
							"    customer_id = random.randint(1000, 9999)\r\n",
							"    order_id = random.randint(10000, 99999)\r\n",
							"    payment_method = random.choice(['PayPal', 'carta di credito', 'bonifico bancario'])\r\n",
							"    timestamp = int(time.time())\r\n",
							"\r\n",
							"    # Creiamo un dizionario Python con i dati appena generati\r\n",
							"    data = {\r\n",
							"        'product': product,\r\n",
							"        'quantity': quantity,\r\n",
							"        'price': price,\r\n",
							"        'customer_id': customer_id,\r\n",
							"        'order_id': order_id,\r\n",
							"        'payment_method': payment_method,\r\n",
							"        'timestamp': timestamp\r\n",
							"    }\r\n",
							"\r\n",
							"    # Convertiamo il dizionario Python in una stringa JSON\r\n",
							"    json_string = json.dumps(data)\r\n",
							"\r\n",
							"    # Stampiamo la stringa JSON su schermo\r\n",
							"    print(json_string)\r\n",
							"\r\n",
							"    # Aspettiamo per qualche secondo prima di iniziare il prossimo ciclo\r\n",
							"    time.sleep(5)"
						],
						"outputs": [],
						"execution_count": null
					}
				]
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/create-data-taxi')]",
			"type": "Microsoft.Synapse/workspaces/notebooks",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"folder": {
					"name": "adls"
				},
				"nbformat": 4,
				"nbformat_minor": 2,
				"bigDataPool": {
					"referenceName": "DevSparkPool",
					"type": "BigDataPoolReference"
				},
				"sessionProperties": {
					"driverMemory": "28g",
					"driverCores": 4,
					"executorMemory": "28g",
					"executorCores": 4,
					"numExecutors": 2,
					"conf": {
						"spark.dynamicAllocation.enabled": "false",
						"spark.dynamicAllocation.minExecutors": "2",
						"spark.dynamicAllocation.maxExecutors": "2",
						"spark.autotune.trackingId": "6372a39d-7372-4c11-beaf-57f690b7f950"
					}
				},
				"metadata": {
					"saveOutput": true,
					"enableDebugMode": false,
					"kernelspec": {
						"name": "synapse_pyspark",
						"display_name": "Synapse PySpark"
					},
					"language_info": {
						"name": "python"
					},
					"a365ComputeOptions": {
						"id": "/subscriptions/b812f629-6402-4f69-ab6a-880bd6a5c752/resourceGroups/rg-Youtube/providers/Microsoft.Synapse/workspaces/ws-syn-aletu/bigDataPools/DevSparkPool",
						"name": "DevSparkPool",
						"type": "Spark",
						"endpoint": "https://ws-syn-aletu.dev.azuresynapse.net/livyApi/versions/2019-11-01-preview/sparkPools/DevSparkPool",
						"auth": {
							"type": "AAD",
							"authResource": "https://dev.azuresynapse.net"
						},
						"sparkVersion": "3.3",
						"nodeCount": 3,
						"cores": 4,
						"memory": 28
					},
					"sessionKeepAliveTimeout": 30
				},
				"cells": [
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"print('ready')"
						],
						"outputs": [],
						"execution_count": 1
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							},
							"collapsed": false
						},
						"source": [
							"from azureml.opendatasets import NycTlcYellow\r\n",
							"from datetime import datetime\r\n",
							"from dateutil import parser\r\n",
							"\r\n",
							"start_date = parser.parse('2010-01-01') \r\n",
							"end_date = parser.parse('2021-12-31')\r\n",
							"\r\n",
							"data = NycTlcYellow(start_date=start_date, end_date=end_date)\r\n",
							"df = data.to_spark_dataframe()\r\n",
							"# Display 10 rows\r\n",
							"display(df.limit(10))"
						],
						"outputs": [],
						"execution_count": 24
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"df.count()"
						],
						"outputs": [],
						"execution_count": 25
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"from pyspark.sql.functions import lpad, col, month, year, dayofmonth\r\n",
							"from pyspark.sql.types import datetime, StringType"
						],
						"outputs": [],
						"execution_count": 26
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"df.columns"
						],
						"outputs": [],
						"execution_count": 27
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							},
							"collapsed": false
						},
						"source": [
							"df_date = (df.select(\r\n",
							"    'vendorID',\r\n",
							"    'tpepPickupDateTime',\r\n",
							"    'tpepDropoffDateTime',\r\n",
							"    'passengerCount',\r\n",
							"    'tripDistance',\r\n",
							"    'puLocationId',\r\n",
							"    'doLocationId',\r\n",
							"    'startLon',\r\n",
							"    'startLat',\r\n",
							"    'endLon',\r\n",
							"    'endLat',\r\n",
							"    'rateCodeId',\r\n",
							"    'storeAndFwdFlag',\r\n",
							"    'paymentType',\r\n",
							"    'fareAmount',\r\n",
							"    'extra',\r\n",
							"    'mtaTax',\r\n",
							"    'improvementSurcharge',\r\n",
							"    'tipAmount',\r\n",
							"    'tollsAmount',\r\n",
							"    'totalAmount',\r\n",
							"    'puYear',\r\n",
							"    lpad(col('puMonth').cast(StringType()), 2, '0').alias('puMonth'),\r\n",
							"    lpad(dayofmonth('tpepPickupDateTime'), 2, '0').alias('puDay')\r\n",
							"                    )\r\n",
							"            )\r\n",
							"\r\n",
							"display(df_date.limit(5))\r\n",
							"df_date.printSchema()"
						],
						"outputs": [],
						"execution_count": 28
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"(df_date.write\r\n",
							".format('parquet')\r\n",
							".mode('overwrite')\r\n",
							".partitionBy('puYear', 'puMonth', 'puDay')\r\n",
							".save('abfss://yellowtaxi@datalakeytaletu.dfs.core.windows.net/nyc/parquet'))"
						],
						"outputs": [],
						"execution_count": 29
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"(df_date.write\r\n",
							".format('csv')\r\n",
							".mode('overwrite')\r\n",
							".partitionBy('puYear', 'puMonth', 'puDay')\r\n",
							".option('sep', '|')\r\n",
							".option('header', True)\r\n",
							".save('abfss://yellowtaxi@datalakeytaletu.dfs.core.windows.net/nyc/csv'))"
						],
						"outputs": [],
						"execution_count": 30
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"(df_date.write\r\n",
							".format('delta')\r\n",
							".mode('overwrite')\r\n",
							".partitionBy('puYear', 'puMonth')\r\n",
							".save('abfss://yellowtaxi@datalakeytaletu.dfs.core.windows.net/nyc/delta'))"
						],
						"outputs": [],
						"execution_count": 32
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"(df_date.write\r\n",
							".format('parquet')\r\n",
							".mode('overwrite')\r\n",
							".save('abfss://yellowtaxi@datalakeytaletu.dfs.core.windows.net/nyc/nonPartitionedParquet'))"
						],
						"outputs": [],
						"execution_count": 31
					}
				]
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/get-data-iss-position')]",
			"type": "Microsoft.Synapse/workspaces/notebooks",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"folder": {
					"name": "streaming"
				},
				"nbformat": 4,
				"nbformat_minor": 2,
				"bigDataPool": {
					"referenceName": "DevSparkPool",
					"type": "BigDataPoolReference"
				},
				"sessionProperties": {
					"driverMemory": "28g",
					"driverCores": 4,
					"executorMemory": "28g",
					"executorCores": 4,
					"numExecutors": 2,
					"conf": {
						"spark.dynamicAllocation.enabled": "false",
						"spark.dynamicAllocation.minExecutors": "2",
						"spark.dynamicAllocation.maxExecutors": "2",
						"spark.autotune.trackingId": "3a384178-ad4e-4749-88ec-8c6db211e29c"
					}
				},
				"metadata": {
					"saveOutput": true,
					"enableDebugMode": false,
					"kernelspec": {
						"name": "synapse_pyspark",
						"display_name": "Synapse PySpark"
					},
					"language_info": {
						"name": "python"
					},
					"a365ComputeOptions": {
						"id": "/subscriptions/b812f629-6402-4f69-ab6a-880bd6a5c752/resourceGroups/rg-Youtube/providers/Microsoft.Synapse/workspaces/ws-syn-aletu/bigDataPools/DevSparkPool",
						"name": "DevSparkPool",
						"type": "Spark",
						"endpoint": "https://ws-syn-aletu.dev.azuresynapse.net/livyApi/versions/2019-11-01-preview/sparkPools/DevSparkPool",
						"auth": {
							"type": "AAD",
							"authResource": "https://dev.azuresynapse.net"
						},
						"sparkVersion": "3.3",
						"nodeCount": 3,
						"cores": 4,
						"memory": 28
					},
					"sessionKeepAliveTimeout": 10
				},
				"cells": [
					{
						"cell_type": "code",
						"source": [
							"from azure.eventhub import EventHubProducerClient, EventData\r\n",
							"from azure.eventhub.exceptions import EventHubError\r\n",
							"import json\r\n",
							"import requests\r\n",
							"import time"
						],
						"outputs": [],
						"execution_count": 2
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"def send_event_data_batch_with_properties(producer, data):\r\n",
							"    event_data_batch = producer.create_batch()\r\n",
							"    event_data = EventData(data)\r\n",
							"    event_data.properties = {'Satellite': 'ISS'}\r\n",
							"    event_data_batch.add(event_data)\r\n",
							"    producer.send_batch(event_data_batch)"
						],
						"outputs": [],
						"execution_count": 3
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"url = \"http://api.open-notify.org/iss-now.json\"\r\n",
							"\r\n",
							"while True:\r\n",
							"    try:\r\n",
							"        response = requests.get(url)\r\n",
							"        data = json.loads(response.content)\r\n",
							"        # print(data)\r\n",
							"\r\n",
							"        timestamp = data['timestamp']\r\n",
							"        message = data['message']\r\n",
							"        latitude = data['iss_position']['latitude']\r\n",
							"        longitude = data['iss_position']['longitude']\r\n",
							"\r\n",
							"        j = json.dumps({'timestamp': timestamp, 'message': message, 'latitude': latitude, 'longitude': longitude}).encode('utf-8')\r\n",
							"\r\n",
							"\r\n",
							"        conn_str='Endpoint=sb://demostreamaletu.servicebus.windows.net/;SharedAccessKeyName=RootManageSharedAccessKey;SharedAccessKey=5TPjI6Oqer8BGbaQCVf/eZ7VX4CB94dbA+AEhHsUmLE=;EntityPath=eventhubdemoaletu'\r\n",
							"        eventhub_name='eventhubdemoaletu'\r\n",
							"\r\n",
							"        producer = EventHubProducerClient.from_connection_string(\r\n",
							"            conn_str=conn_str,\r\n",
							"            eventhub_name=eventhub_name\r\n",
							"        )\r\n",
							"\r\n",
							"        with producer:\r\n",
							"            send_event_data_batch_with_properties(producer,j)\r\n",
							"\r\n",
							"    except Exception as e:\r\n",
							"        print(str(e))\r\n",
							"\r\n",
							"    time.sleep(2) # Chiamata alla API ogni 2 secondi\r\n",
							""
						],
						"outputs": [],
						"execution_count": null
					}
				]
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/optimize-delta-table')]",
			"type": "Microsoft.Synapse/workspaces/notebooks",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"folder": {
					"name": "sanfrancisco/optimize-delta"
				},
				"nbformat": 4,
				"nbformat_minor": 2,
				"bigDataPool": {
					"referenceName": "DevSparkPool",
					"type": "BigDataPoolReference"
				},
				"sessionProperties": {
					"driverMemory": "28g",
					"driverCores": 4,
					"executorMemory": "28g",
					"executorCores": 4,
					"numExecutors": 2,
					"conf": {
						"spark.dynamicAllocation.enabled": "false",
						"spark.dynamicAllocation.minExecutors": "2",
						"spark.dynamicAllocation.maxExecutors": "2",
						"spark.autotune.trackingId": "3b7cb0c0-dda2-407b-8247-378affc032f6"
					}
				},
				"metadata": {
					"saveOutput": true,
					"enableDebugMode": false,
					"kernelspec": {
						"name": "synapse_pyspark",
						"display_name": "Synapse PySpark"
					},
					"language_info": {
						"name": "python"
					},
					"a365ComputeOptions": {
						"id": "/subscriptions/b812f629-6402-4f69-ab6a-880bd6a5c752/resourceGroups/rg-Youtube/providers/Microsoft.Synapse/workspaces/ws-syn-aletu/bigDataPools/DevSparkPool",
						"name": "DevSparkPool",
						"type": "Spark",
						"endpoint": "https://ws-syn-aletu.dev.azuresynapse.net/livyApi/versions/2019-11-01-preview/sparkPools/DevSparkPool",
						"auth": {
							"type": "AAD",
							"authResource": "https://dev.azuresynapse.net"
						},
						"sparkVersion": "3.3",
						"nodeCount": 3,
						"cores": 4,
						"memory": 28
					},
					"sessionKeepAliveTimeout": 30
				},
				"cells": [
					{
						"cell_type": "code",
						"source": [
							"print('ready')"
						],
						"outputs": [],
						"execution_count": 1
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							},
							"microsoft": {
								"language": "sparksql"
							},
							"collapsed": false
						},
						"source": [
							"%%sql\r\n",
							"\r\n",
							"CREATE DATABASE optimize"
						],
						"outputs": [],
						"execution_count": 11
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							},
							"collapsed": false
						},
						"source": [
							"Fire = spark.read.load('abfss://sanfranciscofireworkersdata@datalakeytaletu.dfs.core.windows.net/sanfrancisco/delta/', format='parquet')\r\n",
							"\r\n",
							"display(Fire.limit(5))"
						],
						"outputs": [],
						"execution_count": 17
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"Fire.createOrReplaceTempView('Fire')"
						],
						"outputs": [],
						"execution_count": 18
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							},
							"microsoft": {
								"language": "sparksql"
							},
							"collapsed": false
						},
						"source": [
							"%%sql\r\n",
							"\r\n",
							"CREATE TABLE optimize.spark_fire\r\n",
							"USING DELTA\r\n",
							"LOCATION 'abfss://sanfranciscofireworkersdata@datalakeytaletu.dfs.core.windows.net/sanfrancisco/deltaoptimize/'\r\n",
							"    AS\r\n",
							"    SELECT * FROM Fire"
						],
						"outputs": [],
						"execution_count": 22
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							},
							"microsoft": {
								"language": "sparksql"
							},
							"collapsed": false
						},
						"source": [
							"%%sql\r\n",
							"\r\n",
							"OPTIMIZE optimize.spark_fire"
						],
						"outputs": [],
						"execution_count": 23
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							},
							"microsoft": {
								"language": "sparksql"
							},
							"collapsed": false
						},
						"source": [
							"%%sql\r\n",
							"\r\n",
							"OPTIMIZE optimize.spark_fire ZORDER BY(dateTime)"
						],
						"outputs": [],
						"execution_count": 24
					}
				]
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/streaming-test-connection')]",
			"type": "Microsoft.Synapse/workspaces/notebooks",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"folder": {
					"name": "streaming"
				},
				"nbformat": 4,
				"nbformat_minor": 2,
				"bigDataPool": {
					"referenceName": "DevSparkPool",
					"type": "BigDataPoolReference"
				},
				"sessionProperties": {
					"driverMemory": "28g",
					"driverCores": 4,
					"executorMemory": "28g",
					"executorCores": 4,
					"numExecutors": 2,
					"conf": {
						"spark.dynamicAllocation.enabled": "false",
						"spark.dynamicAllocation.minExecutors": "2",
						"spark.dynamicAllocation.maxExecutors": "2",
						"spark.autotune.trackingId": "99a8e26f-ff4a-474d-91b2-2ada4639d6c4"
					}
				},
				"metadata": {
					"saveOutput": true,
					"enableDebugMode": false,
					"kernelspec": {
						"name": "synapse_pyspark",
						"display_name": "Synapse PySpark"
					},
					"language_info": {
						"name": "python"
					},
					"a365ComputeOptions": {
						"id": "/subscriptions/b812f629-6402-4f69-ab6a-880bd6a5c752/resourceGroups/rg-Youtube/providers/Microsoft.Synapse/workspaces/ws-syn-aletu/bigDataPools/DevSparkPool",
						"name": "DevSparkPool",
						"type": "Spark",
						"endpoint": "https://ws-syn-aletu.dev.azuresynapse.net/livyApi/versions/2019-11-01-preview/sparkPools/DevSparkPool",
						"auth": {
							"type": "AAD",
							"authResource": "https://dev.azuresynapse.net"
						},
						"sparkVersion": "3.3",
						"nodeCount": 3,
						"cores": 4,
						"memory": 28
					},
					"sessionKeepAliveTimeout": 30
				},
				"cells": [
					{
						"cell_type": "code",
						"source": [
							"print('ready')"
						],
						"outputs": [],
						"execution_count": 8
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"!pip install azure-eventhub"
						],
						"outputs": [],
						"execution_count": 2
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"from azure.eventhub import EventHubProducerClient, EventData\r\n",
							"from azure.eventhub.exceptions import EventHubError\r\n",
							"import json"
						],
						"outputs": [],
						"execution_count": 5
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"def send_event_data_batch_with_properties(producer, data):\r\n",
							"    event_data_batch = producer.create_batch()\r\n",
							"    event_data = EventData(data)\r\n",
							"    event_data.properties = {'Satellite': 'ISS'}\r\n",
							"    event_data_batch.add(event_data)\r\n",
							"    producer.send_batch(event_data_batch)"
						],
						"outputs": [],
						"execution_count": 6
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"conn_str='Endpoint=sb://demostreamaletu.servicebus.windows.net/;SharedAccessKeyName=RootManageSharedAccessKey;SharedAccessKey=5TPjI6Oqer8BGbaQCVf/eZ7VX4CB94dbA+AEhHsUmLE=;EntityPath=eventhubdemoaletu'\r\n",
							"eventhub_name='eventhubdemoaletu'\r\n",
							"\r\n",
							"producer = EventHubProducerClient.from_connection_string(\r\n",
							"    conn_str=conn_str,\r\n",
							"    eventhub_name=eventhub_name\r\n",
							")\r\n",
							"\r\n",
							"with producer:\r\n",
							"    send_event_data_batch_with_properties(producer,json.dumps({'test':'006','result':'riuscito'}))"
						],
						"outputs": [],
						"execution_count": 7
					}
				]
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/time-travel-delta')]",
			"type": "Microsoft.Synapse/workspaces/notebooks",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"folder": {
					"name": "taxi"
				},
				"nbformat": 4,
				"nbformat_minor": 2,
				"bigDataPool": {
					"referenceName": "DevSparkPool",
					"type": "BigDataPoolReference"
				},
				"sessionProperties": {
					"driverMemory": "28g",
					"driverCores": 4,
					"executorMemory": "28g",
					"executorCores": 4,
					"numExecutors": 2,
					"conf": {
						"spark.dynamicAllocation.enabled": "false",
						"spark.dynamicAllocation.minExecutors": "2",
						"spark.dynamicAllocation.maxExecutors": "2",
						"spark.autotune.trackingId": "e56b1835-bdf8-4e68-85cc-525c36b1b7e5"
					}
				},
				"metadata": {
					"saveOutput": true,
					"enableDebugMode": false,
					"kernelspec": {
						"name": "synapse_pyspark",
						"display_name": "Synapse PySpark"
					},
					"language_info": {
						"name": "python"
					},
					"a365ComputeOptions": {
						"id": "/subscriptions/b812f629-6402-4f69-ab6a-880bd6a5c752/resourceGroups/rg-Youtube/providers/Microsoft.Synapse/workspaces/ws-syn-aletu/bigDataPools/DevSparkPool",
						"name": "DevSparkPool",
						"type": "Spark",
						"endpoint": "https://ws-syn-aletu.dev.azuresynapse.net/livyApi/versions/2019-11-01-preview/sparkPools/DevSparkPool",
						"auth": {
							"type": "AAD",
							"authResource": "https://dev.azuresynapse.net"
						},
						"sparkVersion": "3.3",
						"nodeCount": 3,
						"cores": 4,
						"memory": 28
					},
					"sessionKeepAliveTimeout": 30
				},
				"cells": [
					{
						"cell_type": "code",
						"source": [
							"print('ready')"
						],
						"outputs": [],
						"execution_count": 1
					},
					{
						"cell_type": "markdown",
						"metadata": {
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"### Creare Database e tabella DELTA"
						]
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							},
							"microsoft": {
								"language": "sparksql"
							},
							"collapsed": false
						},
						"source": [
							"%%sql\r\n",
							"\r\n",
							"CREATE DATABASE taxi"
						],
						"outputs": [],
						"execution_count": 2
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							},
							"collapsed": false
						},
						"source": [
							"df = spark.read.load('abfss://yellowtaxi@datalakeytaletu.dfs.core.windows.net/nyc/delta/puYear=2015/', format='parquet')\r\n",
							"\r\n",
							"display(df.limit(5))"
						],
						"outputs": [],
						"execution_count": 4
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"df.createOrReplaceTempView('taxi_vw')"
						],
						"outputs": [],
						"execution_count": 5
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							},
							"microsoft": {
								"language": "sparksql"
							},
							"collapsed": false
						},
						"source": [
							"%%sql\r\n",
							"\r\n",
							"SELECT\r\n",
							"    CAST(vendorID AS STRING) AS VendorID\r\n",
							"    ,CAST(passengerCount AS INT) AS Passengers\r\n",
							"    ,CAST(totalAmount AS NUMERIC(6,2)) AS Amount\r\n",
							"    ,CAST(tpepPickupDateTime AS TIMESTAMP) AS PickUpDatetime\r\n",
							"    ,CAST(tpepPickupDateTime AS DATE) AS PickUpDate\r\n",
							"    ,CAST(tpepDropoffDateTime AS DATE) AS DropOffDate\r\n",
							"FROM taxi_vw\r\n",
							"LIMIT 5"
						],
						"outputs": [],
						"execution_count": 16
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							},
							"microsoft": {
								"language": "sparksql"
							},
							"collapsed": false
						},
						"source": [
							"%%sql\r\n",
							"\r\n",
							"CREATE TABLE taxi.spark_tt_2015\r\n",
							"USING DELTA\r\n",
							"LOCATION 'abfss://yellowtaxi@datalakeytaletu.dfs.core.windows.net/nyc/delta_timetravel/2015/'\r\n",
							"    AS\r\n",
							"    SELECT\r\n",
							"        CAST(vendorID AS STRING) AS VendorID\r\n",
							"        ,CAST(passengerCount AS INT) AS Passengers\r\n",
							"        ,CAST(totalAmount AS NUMERIC(6,2)) AS Amount\r\n",
							"        ,CAST(tpepPickupDateTime AS TIMESTAMP) AS PickUpDatetime\r\n",
							"        ,CAST(tpepPickupDateTime AS DATE) AS PickUpDate\r\n",
							"        ,CAST(tpepDropoffDateTime AS DATE) AS DropOffDate\r\n",
							"    FROM taxi_vw"
						],
						"outputs": [],
						"execution_count": 17
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							},
							"microsoft": {
								"language": "sparksql"
							},
							"collapsed": false
						},
						"source": [
							"%%sql\r\n",
							"\r\n",
							"SELECT *\r\n",
							"FROM taxi.spark_tt_2015\r\n",
							"LIMIT 5"
						],
						"outputs": [],
						"execution_count": 18
					},
					{
						"cell_type": "markdown",
						"metadata": {
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"### Moltiplico i passeggeri x 10!"
						]
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							},
							"microsoft": {
								"language": "sparksql"
							},
							"collapsed": false
						},
						"source": [
							"%%sql\r\n",
							"\r\n",
							"UPDATE taxi.spark_tt_2015\r\n",
							"SET Passengers = Passengers * 10"
						],
						"outputs": [],
						"execution_count": 19
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							},
							"microsoft": {
								"language": "sparksql"
							},
							"collapsed": false
						},
						"source": [
							"%%sql\r\n",
							"\r\n",
							"SELECT *\r\n",
							"FROM taxi.spark_tt_2015\r\n",
							"LIMIT 5"
						],
						"outputs": [],
						"execution_count": 20
					},
					{
						"cell_type": "markdown",
						"metadata": {
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"### Mostrare lo storico della tabella"
						]
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							},
							"microsoft": {
								"language": "sparksql"
							},
							"collapsed": false
						},
						"source": [
							"%%sql\r\n",
							"\r\n",
							"DESCRIBE HISTORY taxi.spark_tt_2015"
						],
						"outputs": [],
						"execution_count": 21
					},
					{
						"cell_type": "markdown",
						"metadata": {
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"### Vedere la vecchia versione della tabella"
						]
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							},
							"microsoft": {
								"language": "sparksql"
							},
							"collapsed": false
						},
						"source": [
							"%%sql\r\n",
							"\r\n",
							"SELECT *\r\n",
							"FROM taxi.spark_tt_2015\r\n",
							"VERSION AS OF 0\r\n",
							"LIMIT 5"
						],
						"outputs": [],
						"execution_count": 22
					},
					{
						"cell_type": "markdown",
						"metadata": {
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"### Restore della vecchia tabella prima del x 10 sui passeggeri"
						]
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							},
							"microsoft": {
								"language": "sparksql"
							},
							"collapsed": false
						},
						"source": [
							"%%sql\r\n",
							"\r\n",
							"RESTORE TABLE taxi.spark_tt_2015 TO VERSION AS OF 0"
						],
						"outputs": [],
						"execution_count": 23
					},
					{
						"cell_type": "markdown",
						"metadata": {
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"### Mostrare lo storico della tabella"
						]
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							},
							"microsoft": {
								"language": "sparksql"
							},
							"collapsed": false
						},
						"source": [
							"%%sql\r\n",
							"\r\n",
							"DESCRIBE HISTORY taxi.spark_tt_2015"
						],
						"outputs": [],
						"execution_count": 24
					},
					{
						"cell_type": "markdown",
						"metadata": {
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"### Possiamo ancora accedere ai dati corretti (abbiamo fatto il restore), ma anche a quelli sbagliati"
						]
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							},
							"microsoft": {
								"language": "sparksql"
							},
							"collapsed": false
						},
						"source": [
							"%%sql\r\n",
							"\r\n",
							"-- corretti (attuali):\r\n",
							"SELECT *\r\n",
							"FROM taxi.spark_tt_2015\r\n",
							"LIMIT 5"
						],
						"outputs": [],
						"execution_count": 25
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							},
							"microsoft": {
								"language": "sparksql"
							},
							"collapsed": false
						},
						"source": [
							"%%sql\r\n",
							"\r\n",
							"-- sbagliati:\r\n",
							"SELECT *\r\n",
							"FROM taxi.spark_tt_2015\r\n",
							"VERSION AS OF 1\r\n",
							"LIMIT 5"
						],
						"outputs": [],
						"execution_count": 26
					}
				]
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/DevSparkPool')]",
			"type": "Microsoft.Synapse/workspaces/bigDataPools",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"autoPause": {
					"enabled": true,
					"delayInMinutes": 10
				},
				"autoScale": {
					"enabled": false,
					"maxNodeCount": 3,
					"minNodeCount": 3
				},
				"nodeCount": 3,
				"nodeSize": "Small",
				"nodeSizeFamily": "MemoryOptimized",
				"sparkVersion": "3.3",
				"libraryRequirements": {
					"content": "azure-eventhub",
					"filename": "requirements.txt",
					"time": "2023-04-28T19:54:07.2463654Z"
				},
				"isComputeIsolationEnabled": false,
				"sessionLevelPackagesEnabled": true,
				"annotations": []
			},
			"dependsOn": [],
			"location": "westeurope"
		},
		{
			"name": "[concat(parameters('workspaceName'), '/create-qpi')]",
			"type": "Microsoft.Synapse/workspaces/sqlscripts",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"folder": {
					"name": "QPI-QueryPerformanceInsight"
				},
				"content": {
					"query": "-- https://github.com/JocaPC/qpi\n\n--------------------------------------------------------------------------------\n--\tSynapse serverless SQL pool - Query Performance Insights\n--\tAuthor: Jovan Popovic\n--------------------------------------------------------------------------------\n\nSET QUOTED_IDENTIFIER OFF; -- Because I use \"\" as a string literal\nGO\n\nIF SCHEMA_ID('qpi') IS NULL\n\tEXEC ('CREATE SCHEMA qpi');\nGO\n\nCREATE OR ALTER  VIEW qpi.queries\nAS\nSELECT\n\t\ttext =   IIF(LEFT(text,1) = '(', TRIM(')' FROM SUBSTRING( text, (PATINDEX( '%)[^),]%', text))+1, LEN(text))), text) ,\n\t\tparams =  IIF(LEFT(text,1) = '(', SUBSTRING( text, 2, (PATINDEX( '%)[^),]%', text+')'))-2), '') ,\n\t\texecution_type_desc = status COLLATE Latin1_General_CS_AS,\n\t\tfirst_execution_time = start_time, last_execution_time = NULL, count_executions = NULL,\n\t\telapsed_time_s = total_elapsed_time /1000.0,\n\t\tcpu_time_s = cpu_time /1000.0,\n\t\tlogical_io_reads = logical_reads,\n\t\tlogical_io_writes = writes,\n\t\tphysical_io_reads = reads,\n\t\tnum_physical_io_reads = NULL,\n\t\tclr_time = NULL,\n\t\tdop,\n\t\trow_count,\n\t\tmemory_mb = granted_query_memory *8 /1000,\n\t\tlog_bytes = NULL,\n\t\ttempdb_space = NULL,\n\t\tquery_text_id = NULL, query_id = NULL, plan_id = NULL,\n\t\tdatabase_id, connection_id, session_id, request_id, command,\n\t\tinterval_mi = null,\n\t\tstart_time,\n\t\tend_time = null,\n\t\tsql_handle\nFROM    sys.dm_exec_requests\n\t\tCROSS APPLY sys.dm_exec_sql_text(sql_handle)\nWHERE session_id <> @@SPID\n\nGO\n\nCREATE OR ALTER  VIEW qpi.query_history\nAS\nSELECT  query_text_id = query_hash,\n        request_id = distributed_statement_id,\n        elapsed_time_s = total_elapsed_time_ms /1000.,\n        query_text = CASE query_text\n         WHEN '*** Internal delta query ***' THEN 'Scanning Delta transaction log...'\n         WHEN '*** Global stats query ***' THEN 'Collecting file statistics...'\n         WHEN '*** External table stats query ***' THEN 'Collecting file statistics...'\n         ELSE query_text END,\n        data_processed_mb = data_processed_mb,\n        start_time, end_time,\n        transaction_id,\n        status,\n        error, error_code\nFROM sys.dm_exec_requests_history\nGO\n\nCREATE OR ALTER\nFUNCTION qpi.cmp_queries (@request_id1 varchar(40), @request_id2 varchar(40))\nreturns table\nreturn (\n\tselect property = a.[key], a.value query_1, b.value query_2\n\tfrom\n\t(select [key], value\n\tfrom openjson(\n\t(select *\n\t\tfrom qpi.query_history\n\t\twhere request_id = @request_id1\n\t\tfor json path, without_array_wrapper)\n\t)) as a ([key], value)\n\tjoin\n\t(select [key], value\n\tfrom openjson(\n\t(select *\n\t\tfrom qpi.query_history\n\t\twhere request_id = @request_id2\n\t\tfor json path, without_array_wrapper)\n\t)) as b ([key], value)\n\ton a.[key] = b.[key]\n\twhere a.value <> b.value\n\n);\ngo\nCREATE OR ALTER VIEW qpi.recommendations\nAS\nwith sql_definition as (\n\t\tselect \n\t\tobject_id,\n\t\tformat_type = CASE\n\t\t\t\tWHEN UPPER(m.definition) LIKE '%''PARQUET''%' THEN 'PARQUET'\n\t\t\t\tWHEN UPPER(m.definition) LIKE '%''DELTA''%' THEN 'DELTA'\n\t\t\t\tWHEN UPPER(m.definition) LIKE '%''CSV''%' THEN 'CSV'\n\t\t\t\tWHEN UPPER(m.definition) LIKE '%''COSMOSDB''%' THEN 'COSMOSDB'\n\t\t\t\tWHEN \t\tUPPER(m.definition) NOT LIKE '%''PARQUET''%'\n\t\t\t\t\t\tAND (UPPER(m.definition) NOT LIKE '%''CSV''%' )\n\t\t\t\t\t\tAND (UPPER(m.definition) NOT LIKE '%''DELTA''%' )\n\t\t\t\t\t\tAND (UPPER(m.definition) NOT LIKE '%''COSMOSDB''%' )\n\t\t\t\t\t\tTHEN 'COMPOSITE'\n\t\t\t\tELSE 'MIXED'\n\t\t\tEND\n\t\tfrom sys.sql_modules m\n),\nbulkpath as (\nselect schema_name = schema_name(v.schema_id), v.name, val =TRIM(SUBSTRING( LOWER(m.definition) , PATINDEX('%bulk%', LOWER(m.definition)), 2048)), m.definition\nfrom sys.views v\njoin sys.sql_modules m on v.object_id = m.object_id\nwhere PATINDEX('%bulk%', LOWER(m.definition)) > 0\nand schema_name(v.schema_id) <> 'qpi'\n),\nview_path as (\nselect  name,\n\t\tschema_name,\n\t\tpath = SUBSTRING(val, \n\t\t\t\t\t\tCHARINDEX('''', val, 0)+1,\n\t\t\t\t\t\t(CHARINDEX('''', val, CHARINDEX('''', val, 0)+1) - CHARINDEX('''', val, 0) - 1)) \nfrom bulkpath\nwhere CHARINDEX('''', val, 0) > 0\nand schema_name <> 'qpi'\n),\nrecommendations as (\n\nselect\tname = 'USE VARCHAR UTF-8 TYPE',\n        score = 1.0,\n\t\tschema_name = schema_name(v.schema_id),\n\t\tobject = v.name,\n\t\tcolumn_name = c.name,\n\t\treason =\tCONCAT('The view ', v.name, ' that is created on ', m.format_type,' dataset has ', count(c.column_id), ' columns with ') +\n\t\t\t\t\tIIF( t.name = 'nchar', 'NVARCHAR/NCHAR type.', 'VARCHAR/CHAR type without UTF-8 collation.') +\n\t\t\t\t\t' You might get conversion error.' +\n\t\t\t\t\t' Change the column types to VARCHAR with some UTF8 collation.'\nfrom sys.views as v join sys.columns as c on v.object_id = c.object_id\njoin sql_definition m on v.object_id = m.object_id\njoin sys.types t on c.user_type_id = t.user_type_id\nwhere (\tm.format_type IN ('PARQUET', 'DELTA', 'COSMOSDB', 'MIXED') )\nAND\t( (t.name iN ('nchar', 'nvarchar')) OR (t.name iN ('nchar', 'nvarchar') AND c.collation_name NOT LIKE '%UTF8') )\ngroup by v.schema_id, v.name, t.name, m.format_type, c.name\nunion all\n-- Tables on UTF-8 files with NVARCHAR/NCHAR columns or CHAR/VARCHAR without UTF8 collation:\nselect\tname = 'USE VARCHAR TYPE',\n        score = IIF( t.name LIKE 'n%', 0.3, 1.0),\n\t\tschema_name = schema_name(e.schema_id),\n\t\tobject = e.name,\n\t\tcolumn_name = IIF(count(c.column_id)=1, max(c.name), CONCAT(count(c.column_id), ' columns')),\n\t\treason =\tCONCAT('The table \"', schema_name(e.schema_id), '.', e.name, '\" that is created on ', f.format_type, ' files ') +\n\t\t\t\t\tCONCAT(IIF( f.encoding = 'UTF8', ' with UTF-8 encoding ', ''), ' has ',\n\t\t\t\t\tIIF(count(c.column_id)=1, '\"' + max(c.name) + '\" column', CONCAT(count(c.column_id), ' columns') ), ' with ') +\n\t\t\t\t\tIIF( t.name LIKE 'n%', 'NVARCHAR/NCHAR', 'VARCHAR/CHAR without UTF-8 collation.') +\n\t\t\t\t\t' type. Change the column types to VARCHAR with some UTF8 collation.'\nfrom sys.external_tables as e join sys.columns as c on e.object_id = c.object_id\njoin sys.external_file_formats f on e.file_format_id = f.file_format_id\njoin sys.types t on c.user_type_id = t.user_type_id\nwhere ( (f.format_type IN ('PARQUET', 'DELTA')) OR f.encoding = 'UTF8' )\nAND\t( (t.name iN ('nchar', 'nvarchar')) OR (t.name iN ('nchar', 'nvarchar') AND c.collation_name NOT LIKE '%UTF8'))\ngroup by e.schema_id, f.format_type, e.name, f.encoding , t.name, c.name\nunion all\n-- Tables on UTF-16 files with VARCHAR/CHAR columns:\nselect\tname = 'USE NVARCHAR TYPE',\n        score = 1.0,\n\t\t\n\t\tschema_name = schema_name(e.schema_id),\n\t\tobject = e.name,\n\t\tcolumn_name = IIF(count(c.column_id)=1, max(c.name), CONCAT(count(c.column_id), ' columns')),\n\t\treason =\tCONCAT('The table \"',  schema_name(e.schema_id), '.', e.name, '\" created on CSV files with UTF16 encoding has ', \n\t\t\t\t\t\tIIF(count(c.column_id)=1, '\"' + max(c.name) + '\" column', CONCAT(count(c.column_id), ' columns') ), ' with ') +\n\t\t\t\t\t'VARCHAR/CHAR type. Change the column type to NVARCHAR.'\nfrom sys.external_tables as e join sys.columns as c on e.object_id = c.object_id\njoin sys.external_file_formats f on e.file_format_id = f.file_format_id\njoin sys.types t on c.user_type_id = t.user_type_id\nwhere (f.encoding = 'UTF16' )\nAND\t(t.name iN ('nchar', 'nvarchar'))\ngroup by e.schema_id, f.format_type, e.name, f.encoding , t.name\nunion all\nselect\tname = 'OPTIMIZE STRING FILTER',\n        score = case\n\t\t\t\t\twhen string_agg(c.name,',') like '%id%' then 0.9\n\t\t\t\t\twhen string_agg(c.name,',') like '%code%' then 0.9\n\t\t\t\t\twhen count(c.column_id) > 1 then 0.81\n\t\t\t\t\telse 0.71\n\t\t\t\t\tend,\n\t\t\n\t\tschema_name = schema_name(v.schema_id),\n\t\tobject = v.name,\n\t\tcolumn_name = IIF(count(c.column_id)=1, max(c.name), CONCAT(count(c.column_id), ' columns')),\n\t\treason =\tCONCAT('The view \"',  schema_name(v.schema_id), '.', v.name, '\" that is created on ', m.format_type, ' dataset has ',\n\t\t\t\t\t\t\tIIF(count(c.column_id)=1, '\"' + max(c.name) + '\" column', CONCAT(count(c.column_id), ' columns') ), ' with ') +\n\t\t\t\t\tIIF( t.name = 'nchar', 'NVARCHAR/NCHAR type.', 'VARCHAR/CHAR type without BIN2 UTF8 collation.') +\n\t\t\t\t\t' Change the column types to VARCHAR with the Latin1_General_100_BIN2_UTF8 collation.'\nfrom sys.views as v join sys.columns as c on v.object_id = c.object_id\njoin sql_definition m on v.object_id = m.object_id\njoin sys.types t on c.user_type_id = t.user_type_id\nwhere (\tm.format_type IN ('PARQUET', 'DELTA', 'COSMOSDB', 'MIXED') )\nAND\t( t.name IN ('char', 'varchar') AND c.collation_name <> 'Latin1_General_100_BIN2_UTF8' )\ngroup by v.schema_id, v.name, t.name, m.format_type\n\nunion all\n\n-- Tables on Parquet/Delta Lake files with the columns without BIN2 UTF-8 collation:\nselect\tname = 'OPTIMIZE STRING FILTER',\n\t\tscore = 0.6,\n        schema_name = schema_name(e.schema_id),\n\t\tobject = e.name,\n\t\tcolumn_name = c.name,\n\t\treason = CONCAT('The string column \"', c.name, '\" in table \"', schema_name(t.schema_id), '.', t.name, '\" doesn''t have \"Latin1_General_100_BIN2_UTF8\". String filter on this column are suboptimal')\nfrom sys.external_tables as e join sys.columns as c on e.object_id = c.object_id\njoin sys.external_file_formats f on e.file_format_id = f.file_format_id\njoin sys.types t on c.user_type_id = t.user_type_id\nwhere ( (f.format_type IN ('PARQUET', 'DELTA'))) AND t.name IN ('char', 'varchar') AND c.collation_name <> 'Latin1_General_100_BIN2_UTF8'\n\nunion all\n-- Oversized string columns:\nselect\tname = 'OPTIMIZE COLUMN TYPE',\n        score = ROUND(0.3 + (IIF(c.max_length=-1, 0.7*12000., c.max_length)/12000.),1),\n\t\tschema_name = schema_name(o.schema_id),\n\t\tobject = o.name,\n\t\tcolumn_name = c.name,\n\t\treason = CONCAT('The string column \"', c.name, '\" has a max size ', \n\t\t\t\tIIF(c.max_length=-1, ' 2 GB', CAST( c.max_length AS VARCHAR(10)) + ' bytes'), '. Check could you use a column with a smaller size.',\n\t\t\t\tIIF(o.type = 'U', ' Table ', ' View '), '\"', schema_name(o.schema_id), '.', o.name, '\"')\nfrom sys.objects as o join sys.columns as c on o.object_id = c.object_id\njoin sys.types t on c.user_type_id = t.user_type_id\nwhere t.name LIKE '%char' AND (c.max_length > 256 OR c.max_length = -1)\nand o.type in ('U', 'V')\nand lower(c.name) not like '%desc%'\nand lower(c.name) not like '%comment%'\nand lower(c.name) not like '%note%'\nand lower(c.name) not like '%exception%'\nand lower(c.name) not like '%reason%'\nand lower(c.name) not like '%explanation%'\nunion all\n\n-- Oversized key columns:\nselect\tname = 'OPTIMIZE KEY COLUMN TYPE',\n        score = 0.4 + ROUND((1-EXP(-IIF(c.max_length=-1, 8000., c.max_length)/8000.)),1),\n\t\tschema_name = schema_name(o.schema_id),\n\t\tobject = o.name,\n\t\tcolumn_name = c.name,\n\t\treason = CONCAT('Are you using the column \"', c.name, '\" in join/filter predicates? ',\n\t\t\t\t\t\t\t'The column type is ', t.name, '(size:',IIF(c.max_length=-1, ' 2 GB', CAST( c.max_length AS VARCHAR(10)) + ' bytes'),'). ',\n\t\t\t\t\t\t\t'Try to use a column with a smaller type or size.')\nfrom sys.objects as o join sys.columns as c on o.object_id = c.object_id\njoin sys.types t on c.user_type_id = t.user_type_id\nwhere (c.name LIKE '%code' OR  c.name LIKE '%id') AND (c.max_length > 8 OR c.max_length = -1)\nand o.type in ('U', 'V')\n\nunion all\n\n-- The tables that are referencing the same location:\nselect\tname = 'REMOVE DUPLICATE REFERENCES',\n        score = 0.9,\n\t\tschema_name = NULL,\n\t\tobject = NULL,\n\t\tcolumn_name = NULL,\n\t\treason = CONCAT('The tables ', string_agg(concat('\"',schema_name(e.schema_id),'.',e.name,'\"'), ','), ' are referencing the same location')\nfrom sys.external_tables e\ngroup by data_source_id, location\nhaving count(*) > 1\n\nunion all\n\n-- Partitioned external table\nselect\tname = 'REPLACE TABLE WITH PARTITIONED VIEW',\n        score = 1.0,\n\t\tschema_name = schema_name(e.schema_id),\n\t\tobject = e.name,\n\t\tcolumn_name = NULL,\n\t\treason = CONCAT('The table ', e.name, ' is created on a partitioned data set, but cannot leverage partition elimination. Replace it with a partitioned view.')\nfrom sys.external_tables e\nwhere REPLACE(location, '*.', '') like '%*%'\n\nunion all\n\nselect\tname = 'USE BETTER COLUMN TYPE',\n        score = IIF(c.max_length=-1, 1.0, 0.2 + ROUND((1-EXP(-c.max_length/50.))/2,1)),\n\t\tschema_name = schema_name(o.schema_id),\n\t\tobject = o.name,\n\t\tcolumn_name = c.name,\n\t\treason = CONCAT('Do you need to use the type \"', t.name, '(size:',IIF(c.max_length=-1, ' 2 GB', CAST( c.max_length AS VARCHAR(10)) + ' bytes'),') in column \"', c.name, '\" in view: \"', schema_name(o.schema_id), '.', o.name, '\"')\nfrom sys.objects as o join sys.columns as c on o.object_id = c.object_id\njoin sys.types t on c.user_type_id = t.user_type_id\nwhere\n\tt.name IN ('nchar', 'nvarchar', 'char', 'varchar', 'binary', 'varbinary')\nAND\n\t(\tLOWER(c.name) like '%date%' OR LOWER(c.name) like '%time%' \n\tOR\tLOWER(c.name) like '%guid%'\n\tOR\tLOWER(c.name) like '%price%' OR LOWER(c.name) like '%amount%' )\nAND\n\to.type in ('U', 'V')\nand lower(c.name) not like '%desc%'\nand lower(c.name) not like '%comment%'\nand lower(c.name) not like '%note%'\nand lower(c.name) not like '%exception%'\nand lower(c.name) not like '%reason%'\nand lower(c.name) not like '%explanation%'\n\nunion all\n\nselect\tname = 'REMOVE DUPLICATE REFERENCES',\n        score = 0.9,\n\t\tschema_name = NULL,\n\t\tobject = NULL,\n\t\tcolumn_name = NULL,\n\t\treason = CONCAT('Views ', string_agg(concat(schema_name,'.',name), ','), ' are referencing the same path: ', path)\nfrom view_path\ngroup by path\nhaving count(*) > 1\n)\nSELECT * FROM recommendations\nWHERE schema_name <> 'qpi'\nGO\n\nCREATE OR ALTER PROCEDURE qpi.generate_cosmosdb_with_schema ( @connection nvarchar(max), @container nvarchar(1000))\nAS BEGIN\nDECLARE @tsql NVARCHAR(MAX) \nSET @tsql = \"SELECT TOP 10 *\nFROM OPENROWSET( \n         'CosmosDB',\n        '\"+@connection+\"',\n        \"+@container + \") as data\"\n\ncreate table #frs (\n    is_hidden bit not null,\n    column_ordinal int not null,\n    name sysname null,\n    is_nullable bit not null,\n    system_type_id int not null,\n    system_type_name nvarchar(256) null,\n    max_length smallint not null,\n    precision tinyint not null,\n    scale tinyint not null,\n    collation_name sysname null,\n    user_type_id int null,\n    user_type_database sysname null,\n    user_type_schema sysname null,\n    user_type_name sysname null,\n    assembly_qualified_type_name nvarchar(4000),\n    xml_collection_id int null,\n    xml_collection_database sysname null,\n    xml_collection_schema sysname null,\n    xml_collection_name sysname null,\n    is_xml_document bit not null,\n    is_case_sensitive bit not null,\n    is_fixed_length_clr_type bit not null,\n    source_server sysname null,\n    source_database sysname null,\n    source_schema sysname null,\n    source_table sysname null,\n    source_column sysname null,\n    is_identity_column bit null,\n    is_part_of_unique_key bit null,\n    is_updateable bit null,\n    is_computed_column bit null,\n    is_sparse_column_set bit null,\n    ordinal_in_order_by_list smallint null,\n    order_by_list_length smallint null,\n    order_by_is_descending smallint null,\n    tds_type_id int not null,\n    tds_length int not null,\n    tds_collation_id int null,\n    tds_collation_sort_id tinyint null\n);\n\ninsert #frs\nexec sys.sp_describe_first_result_set @tsql;\n\ndeclare @with_clause nvarchar(max);\nset @with_clause = (select 'WITH (' + string_agg(QUOTENAME(name) + ' ' + system_type_name, ', ') + ')' from #frs);\n\nselect\n'Note:', 'This is an autogenerated schema for cosmosDB contianer. Try to optimize it and minimize the types like VARCHAR(8000)!'\nunion all\nselect 'Query:', \"SELECT * FROM OPENROWSET( 'CosmosDB',\n        '\"+@connection+\"',\n        \"+@container + ') ' + @with_clause + ' as data'\nunion ALL\nselect 'WITH clause:', @with_clause;\nEND\nGO\n\nCREATE OR ALTER   PROCEDURE [qpi].[create_diagnostics] @path varchar(1024)\nAS BEGIN\n\n\tDECLARE @tsql VARCHAR(MAX);\n\n\tSET @tsql = CONCAT(\"DROP EXTERNAL DATA SOURCE [Diagnostics];\nCREATE EXTERNAL DATA SOURCE [Diagnostics] WITH ( LOCATION = '\", @path, \"' );\");\n\n\tEXEC(@tsql);\n\n\tSET @tsql = \"CREATE OR ALTER VIEW qpi.diagnostics\nAS SELECT\n    subscriptionId = r.filepath(1),\n    resourceGroup = r.filepath(2),\n    workspace = r.filepath(3),\n    year = CAST(r.filepath(4) AS SMALLINT),\n    month = CAST(r.filepath(5) AS TINYINT),\n    day = CAST(r.filepath(6) AS TINYINT),\n    hour = CAST(r.filepath(7) AS TINYINT),\n    minute = CAST(r.filepath(8) AS TINYINT),\n    details.queryType,\n    durationS = CAST(details.durationMs / 1000. AS NUMERIC(8,1)),\n    dataProcessedMB = CAST(details.dataProcessedBytes /1024./1024 AS NUMERIC(16,1)),\n    details.distributedStatementId,\n    details.queryText,\n\tdetails.startTime,\n    details.endTime,\n    details.resultType,\n\tdetails.queryHash,\n    details.operationName,\n    details.endpoint,\n    details.resourceId,\n    details.error\nFROM\n    OPENROWSET(\n        BULK 'resourceId=/SUBSCRIPTIONS/*/RESOURCEGROUPS/*/PROVIDERS/MICROSOFT.SYNAPSE/WORKSPACES/*/y=*/m=*/d=*/h=*/m=*/*.json',\n        DATA_SOURCE = 'Diagnostics',\n        FORMAT = 'CSV',\n        FIELDQUOTE = '0x0b',\n        FIELDTERMINATOR ='0x0b'\n    )\n    WITH (\n        jsonContent varchar(MAX)\n    ) AS r CROSS APPLY OPENJSON(jsonContent)\n                        WITH (  endpoint varchar(128) '$.LogicalServerName',\n                                resourceGroup varchar(128) '$.ResourceGroup',\n                                startTime datetime2 '$.properties.startTime',\n                                endTime datetime2 '$.properties.endTime',\n                                dataProcessedBytes bigint '$.properties.dataProcessedBytes',\n                                durationMs bigint,\n                                loginName varchar(128) '$.identity.loginName',\n                                distributedStatementId varchar(128) '$.properties.distributedStatementId',\n                                resultType varchar(128) ,\n                                queryText varchar(max) '$.properties.queryText',\n                                queryHash varchar(128) '$.properties.queryHash',\n                                operationName varchar(128),\n\t\t\t\terror varchar(128) '$.properties.error',\n                                queryType varchar(128) '$.properties.command',\n\t\t\t\tresourceId varchar(1024) '$.resourceId'\n                             ) as details\";\n\n\t\tEXEC(@tsql);\nEND\nGO",
					"metadata": {
						"language": "sql"
					},
					"currentConnection": {
						"databaseName": "LogicalDWH",
						"poolName": "Built-in"
					},
					"resultLimit": 5000
				},
				"type": "SqlQuery"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/check-qpi')]",
			"type": "Microsoft.Synapse/workspaces/sqlscripts",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"folder": {
					"name": "QPI-QueryPerformanceInsight"
				},
				"content": {
					"query": "/*\nInsieme di raccomandazioni sul database. Vista che investiga tra i metadati (sys,tabkes, sys.columns, ecc.) e se c'è qualcosa di sospetto o di sbagliato.\nMeglio ordinare per score -> più è alto lo score e più è importante la raccomandazione\n*/\n\nSELECT * FROM qpi.recommendations ORDER BY score DESC;\n\n/*\nQuery che stanno eseguendo sul mio Serverless SQL pool in questo momento\n*/\n\nSELECT * FROM qpi.queries;\n\n/*\nQuery che sono state eseguite sul mio Serverless SQL pool.\n*/\n\nSELECT * FROM qpi.query_history;\n\n-- Mi restituisce tutte le query che hanno lo stesso testo:\nSELECT * FROM qpi.query_history WHERE query_text_id = 0x2F0D9F43F94B5778;\n-- Da qui posso vedere le caratteristiche delle query che hanno lo stesso identico testo\n\n-- Se voglio confrontare due query devo prendere il loro request_id:\nSELECT *\nFROM qpi.cmp_queries('{3FE352BC-2606-4F2E-8A10-42812626F622}', '{C2F0D692-E7D3-48DA-A376-7CA6E1C7EF16}');\n\n\n\n\n\n\n",
					"metadata": {
						"language": "sql"
					},
					"currentConnection": {
						"databaseName": "LogicalDWH",
						"poolName": "Built-in"
					},
					"resultLimit": 5000
				},
				"type": "SqlQuery"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/partition-filepath')]",
			"type": "Microsoft.Synapse/workspaces/sqlscripts",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"folder": {
					"name": "taxi/serverless/partition"
				},
				"content": {
					"query": "-- Non sono presenti le cartelle che contengono i file all'interno del dataset \nSELECT\n    TOP 100 *\nFROM\n    OPENROWSET(\n        BULK 'https://datalakeytaletu.dfs.core.windows.net/yellowtaxi/nyc/parquet/puYear=2018/puMonth=06/puDay=03/part-00400-8a590b10-ccb7-4254-aefc-4ea34c6bf077.c000.snappy.parquet',\n        FORMAT = 'PARQUET'\n    ) AS [result];\n\n-- Per farle comparire devo aggiungerle con la funzione .filepath()\nSELECT\n    TOP 100 *\n    ,[result].filepath(1) as PuDay\nFROM\n    OPENROWSET(\n        BULK 'https://datalakeytaletu.dfs.core.windows.net/yellowtaxi/nyc/parquet/puYear=2018/puMonth=06/puDay=*/**',\n        FORMAT = 'PARQUET'\n    ) AS [result]\nWHERE [result].filepath(1) = '06';\n\n-- Per creare le partizioni vedi il Notebook di creazione nella cartella adls ",
					"metadata": {
						"language": "sql"
					},
					"currentConnection": {
						"databaseName": "master",
						"poolName": "Built-in"
					},
					"resultLimit": 5000
				},
				"type": "SqlQuery"
			},
			"dependsOn": []
		}
	]
}